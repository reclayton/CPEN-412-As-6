680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 13 Apr 2023      Time: 22:42:54          Source: C:\USERS\RCLAY\DESKTOP\CPEN_412\CPEN-412-AS-6\PROGRAMS\AS6-MULTITHREAD\CANBUSTEST.SRC

                       1          section   code
                       2   **********************************************************************************************************
                       3   * CSTART.ASM  -  C startup-code
                       4   *
                       5   *          Initialises the system prior to running the users main() program
                       6   *
                       7   *          1) Sets up the user program stack pointer
                       8   *          2) Switches to User mode in the 68000
                       9   *          3) Enables All Interrupts 1-7 on 68000
                      10   *          4) Copies all initialised C program variables from Rom to Ram prior to running main()
                      11   *
                      12   **********************************************************************************************************
00000000              13                   align
                      14   
                      15   
                      16   **********************************************************************************************************
                      17   * The Following ORG Statement marks the address of the start of the this CStart Program
                      18   *
                      19   * The debug Monitor and Flash Load and Program routines assume your program lives here
                      20   **********************************************************************************************************
08000000              21                   org       $08000000
08000000  46FC 2000   22   start:          move.w    #$2000,SR             clear interrupts to enable all, move to supervisor mode
                      23   
                      24   ******************************************************************************************
                      25   * Set unitialised global variables to 0 at startup
                      26   ******************************************************************************************
08000004  207C 0800   27   mainloop        movea.l   #BssStart,a0          point a0 to the start of the initialised data section held in ROM
08000008  10E6      
0800000A  203C 0000   28                   move.l    #BssLength,d0         figure out how many bytes of C program variables data to copy
0800000E  0000      
08000010  6700 0024   29                   beq       go_main               if no data to copy go straight to program
08000014  10FC 0000   30   Zeroinit        move.b    #0,(a0)+              copy the C program initialise variables from rom to ram
08000018  5380        31                   subq.l    #1,d0
0800001A  66F8        32                   bne       Zeroinit
                      33   
                      34   *******************************************************************************************
                      35   * last minute initialisation before calling main
                      36   *******************************************************************************************
                      37   
0800001C  23FC FFFF   38                   move.l    #-1,__ungetbuf         required for use of scanf() etc in C programs
08000020  FFFF 0800 
08000024  10DA      
08000026  42B9 0800   39                   clr.l     __allocp               used by malloc() in C
0800002A  10DE      
0800002C  23FC 0800   40                   move.l    #heap,__heap           pointer to free memory
08000030  10E6 0800 
08000034  10E2      
08000036  4EB9 0800   41   go_main         jsr       _main
0800003A  04B6      
0800003C  60C2        42                   bra       start
                      43   
                      44   ; C:\USERS\RCLAY\DESKTOP\CPEN_412\CPEN-412-AS-6\PROGRAMS\AS6-MULTITHREAD\CANBUSTEST.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                      45   ; #include <stdio.h>
                      46   ; #include <stdlib.h>
                      47   ; /*********************************************************************************************
                      48   ; **	RS232 port addresses defined as pointers
                      49   ; *********************************************************************************************/
                      50   ; #define RS232_Control     (*(volatile unsigned char *)(0x00400040))
                      51   ; #define RS232_Status      (*(volatile unsigned char *)(0x00400040))
                      52   ; #define RS232_TxData      (*(volatile unsigned char *)(0x00400042))
                      53   ; #define RS232_RxData      (*(volatile unsigned char *)(0x00400042))
                      54   ; #define RS232_Baud        (*(volatile unsigned char *)(0x00400044))
                      55   ; /*********************************************************************************************
                      56   ; **  Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                      57   ; **	Call this function at the start of the program before you attempt to read or write to hyperterminal
                      58   ; *********************************************************************************************/
                      59   ; void Init_RS232(void)
                      60   ; {
                      61   _Init_RS232:
                      62   ; RS232_Control = 0x15 ; //  %00010101 set up serial port to use divide by 16 clock, set RTS low, 8 bits no parity, 1 stop bit, transmitter interrupt disabled
0800003E  13FC 0015   63          move.b    #21,4194368
08000042  0040 0040 
                      64   ; RS232_Baud = 0x1 ;      // program serial port speed: 000 = 230 kbaud, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
08000046  13FC 0001   65          move.b    #1,4194372
0800004A  0040 0044 
0800004E  4E75        66          rts
                      67   ; }
                      68   ; /*********************************************************************************************************
                      69   ; **  Subroutine to provide a low level output function to 6850 ACIA
                      70   ; **  This routine provides the basic functionality to output a single character to the serial Port
                      71   ; **  to allow the board to communicate with HyperTerminal Program
                      72   ; **
                      73   ; **  NOTE you do NOT call this function directly, instead  call the normal putchar() function
                      74   ; **  which in turn calls _putch() below.
                      75   ; **
                      76   ; **	Other functions like puts(), printf() call putchar() so will
                      77   ; **  call _putch() below so it's fully integrates into the C standard library routines
                      78   ; *********************************************************************************************************/
                      79   ; int _putch(int c)
                      80   ; {
                      81   __putch:
08000050  4E56 0000   82          link      A6,#0
                      83   ; // write the character to the RS232 port first - comment out if not wanted
                      84   ; while((RS232_Status & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                      85   _putch_1:
08000054  1039 0040   86          move.b    4194368,D0
08000058  0040      
0800005A  C03C 0002   87          and.b     #2,D0
0800005E  0C00 0002   88          cmp.b     #2,D0
08000062  6702        89          beq.s     _putch_3
08000064  60EE        90          bra       _putch_1
                      91   _putch_3:
                      92   ; ;
                      93   ; RS232_TxData = (c & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
08000066  202E 0008   94          move.l    8(A6),D0
0800006A  C0BC 0000   95          and.l     #127,D0
0800006E  007F      
08000070  13C0 0040   96          move.b    D0,4194370
08000074  0042      
                      97   ; return c ;                                              // putchar() expects the character to be returned
08000076  202E 0008   98          move.l    8(A6),D0
0800007A  4E5E        99          unlk      A6
0800007C  4E75       100          rts
                     101   ; }
                     102   ; /*********************************************************************************************************
                     103   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     104   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     105   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     106   ; **
                     107   ; **  NOTE you do not call this function directly, instead you call the normal getchar() function
                     108   ; **  which in turn calls _getch() below).
                     109   ; **	Other functions like gets(), scanf() call getchar() so will
                     110   ; **  call _getch() below so it's fully integrates into the C standard library routines
                     111   ; *********************************************************************************************************/
                     112   ; int _getch( void )
                     113   ; {
                     114   __getch:
                     115   ; while((RS232_Status & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     116   _getch_1:
0800007E  1039 0040  117          move.b    4194368,D0
08000082  0040      
08000084  C03C 0001  118          and.b     #1,D0
08000088  0C00 0001  119          cmp.b     #1,D0
0800008C  6702       120          beq.s     _getch_3
0800008E  60EE       121          bra       _getch_1
                     122   _getch_3:
                     123   ; ;
                     124   ; return (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
08000090  1039 0040  125          move.b    4194370,D0
08000094  0042      
08000096  C0BC 0000  126          and.l     #255,D0
0800009A  00FF      
0800009C  C0BC 0000  127          and.l     #127,D0
080000A0  007F      
080000A2  4E75       128          rts
                     129   ; }
                     130   ; /*********************************************************************************************
                     131   ; ** These addresses and definitions were taken from Appendix 7 of the Can Controller
                     132   ; ** application note and adapted for the 68k assignment
                     133   ; *********************************************************************************************/
                     134   ; /*
                     135   ; ** definition for the SJA1000 registers and bits based on 68k address map areas
                     136   ; ** assume the addresses for the 2 can controllers given in the assignment
                     137   ; **
                     138   ; ** Registers are defined in terms of the following Macro for each Can controller,
                     139   ; ** where (i) represents an registers number
                     140   ; */
                     141   ; #define CAN0_CONTROLLER(i) (*(volatile unsigned char *)(0x00500000 + (i << 1)))
                     142   ; #define CAN1_CONTROLLER(i) (*(volatile unsigned char *)(0x00500200 + (i << 1)))
                     143   ; /* Can 0 register definitions */
                     144   ; #define Can0_ModeControlReg      CAN0_CONTROLLER(0)
                     145   ; #define Can0_CommandReg          CAN0_CONTROLLER(1)
                     146   ; #define Can0_StatusReg           CAN0_CONTROLLER(2)
                     147   ; #define Can0_InterruptReg        CAN0_CONTROLLER(3)
                     148   ; #define Can0_InterruptEnReg      CAN0_CONTROLLER(4) /* PeliCAN mode */
                     149   ; #define Can0_BusTiming0Reg       CAN0_CONTROLLER(6)
                     150   ; #define Can0_BusTiming1Reg       CAN0_CONTROLLER(7)
                     151   ; #define Can0_OutControlReg       CAN0_CONTROLLER(8)
                     152   ; /* address definitions of Other Registers */
                     153   ; #define Can0_ArbLostCapReg       CAN0_CONTROLLER(11)
                     154   ; #define Can0_ErrCodeCapReg       CAN0_CONTROLLER(12)
                     155   ; #define Can0_ErrWarnLimitReg     CAN0_CONTROLLER(13)
                     156   ; #define Can0_RxErrCountReg       CAN0_CONTROLLER(14)
                     157   ; #define Can0_TxErrCountReg       CAN0_CONTROLLER(15)
                     158   ; #define Can0_RxMsgCountReg       CAN0_CONTROLLER(29)
                     159   ; #define Can0_RxBufStartAdr       CAN0_CONTROLLER(30)
                     160   ; #define Can0_ClockDivideReg      CAN0_CONTROLLER(31)
                     161   ; /* address definitions of Acceptance Code & Mask Registers - RESET MODE */
                     162   ; #define Can0_AcceptCode0Reg      CAN0_CONTROLLER(16)
                     163   ; #define Can0_AcceptCode1Reg      CAN0_CONTROLLER(17)
                     164   ; #define Can0_AcceptCode2Reg      CAN0_CONTROLLER(18)
                     165   ; #define Can0_AcceptCode3Reg      CAN0_CONTROLLER(19)
                     166   ; #define Can0_AcceptMask0Reg      CAN0_CONTROLLER(20)
                     167   ; #define Can0_AcceptMask1Reg      CAN0_CONTROLLER(21)
                     168   ; #define Can0_AcceptMask2Reg      CAN0_CONTROLLER(22)
                     169   ; #define Can0_AcceptMask3Reg      CAN0_CONTROLLER(23)
                     170   ; /* address definitions Rx Buffer - OPERATING MODE - Read only register*/
                     171   ; #define Can0_RxFrameInfo         CAN0_CONTROLLER(16)
                     172   ; #define Can0_RxBuffer1           CAN0_CONTROLLER(17)
                     173   ; #define Can0_RxBuffer2           CAN0_CONTROLLER(18)
                     174   ; #define Can0_RxBuffer3           CAN0_CONTROLLER(19)
                     175   ; #define Can0_RxBuffer4           CAN0_CONTROLLER(20)
                     176   ; #define Can0_RxBuffer5           CAN0_CONTROLLER(21)
                     177   ; #define Can0_RxBuffer6           CAN0_CONTROLLER(22)
                     178   ; #define Can0_RxBuffer7           CAN0_CONTROLLER(23)
                     179   ; #define Can0_RxBuffer8           CAN0_CONTROLLER(24)
                     180   ; #define Can0_RxBuffer9           CAN0_CONTROLLER(25)
                     181   ; #define Can0_RxBuffer10          CAN0_CONTROLLER(26)
                     182   ; #define Can0_RxBuffer11          CAN0_CONTROLLER(27)
                     183   ; #define Can0_RxBuffer12          CAN0_CONTROLLER(28)
                     184   ; /* address definitions of the Tx-Buffer - OPERATING MODE - Write only register */
                     185   ; #define Can0_TxFrameInfo         CAN0_CONTROLLER(16)
                     186   ; #define Can0_TxBuffer1           CAN0_CONTROLLER(17)
                     187   ; #define Can0_TxBuffer2           CAN0_CONTROLLER(18)
                     188   ; #define Can0_TxBuffer3           CAN0_CONTROLLER(19)
                     189   ; #define Can0_TxBuffer4           CAN0_CONTROLLER(20)
                     190   ; #define Can0_TxBuffer5           CAN0_CONTROLLER(21)
                     191   ; #define Can0_TxBuffer6           CAN0_CONTROLLER(22)
                     192   ; #define Can0_TxBuffer7           CAN0_CONTROLLER(23)
                     193   ; #define Can0_TxBuffer8           CAN0_CONTROLLER(24)
                     194   ; #define Can0_TxBuffer9           CAN0_CONTROLLER(25)
                     195   ; #define Can0_TxBuffer10          CAN0_CONTROLLER(26)
                     196   ; #define Can0_TxBuffer11          CAN0_CONTROLLER(27)
                     197   ; #define Can0_TxBuffer12          CAN0_CONTROLLER(28)
                     198   ; /* read only addresses */
                     199   ; #define Can0_TxFrameInfoRd       CAN0_CONTROLLER(96)
                     200   ; #define Can0_TxBufferRd1         CAN0_CONTROLLER(97)
                     201   ; #define Can0_TxBufferRd2         CAN0_CONTROLLER(98)
                     202   ; #define Can0_TxBufferRd3         CAN0_CONTROLLER(99)
                     203   ; #define Can0_TxBufferRd4         CAN0_CONTROLLER(100)
                     204   ; #define Can0_TxBufferRd5         CAN0_CONTROLLER(101)
                     205   ; #define Can0_TxBufferRd6         CAN0_CONTROLLER(102)
                     206   ; #define Can0_TxBufferRd7         CAN0_CONTROLLER(103)
                     207   ; #define Can0_TxBufferRd8         CAN0_CONTROLLER(104)
                     208   ; #define Can0_TxBufferRd9         CAN0_CONTROLLER(105)
                     209   ; #define Can0_TxBufferRd10        CAN0_CONTROLLER(106)
                     210   ; #define Can0_TxBufferRd11        CAN0_CONTROLLER(107)
                     211   ; #define Can0_TxBufferRd12        CAN0_CONTROLLER(108)
                     212   ; /* CAN1 Controller register definitions */
                     213   ; #define Can1_ModeControlReg      CAN1_CONTROLLER(0)
                     214   ; #define Can1_CommandReg          CAN1_CONTROLLER(1)
                     215   ; #define Can1_StatusReg           CAN1_CONTROLLER(2)
                     216   ; #define Can1_InterruptReg        CAN1_CONTROLLER(3)
                     217   ; #define Can1_InterruptEnReg      CAN1_CONTROLLER(4) /* PeliCAN mode */
                     218   ; #define Can1_BusTiming0Reg       CAN1_CONTROLLER(6)
                     219   ; #define Can1_BusTiming1Reg       CAN1_CONTROLLER(7)
                     220   ; #define Can1_OutControlReg       CAN1_CONTROLLER(8)
                     221   ; /* address definitions of Other Registers */
                     222   ; #define Can1_ArbLostCapReg       CAN1_CONTROLLER(11)
                     223   ; #define Can1_ErrCodeCapReg       CAN1_CONTROLLER(12)
                     224   ; #define Can1_ErrWarnLimitReg     CAN1_CONTROLLER(13)
                     225   ; #define Can1_RxErrCountReg       CAN1_CONTROLLER(14)
                     226   ; #define Can1_TxErrCountReg       CAN1_CONTROLLER(15)
                     227   ; #define Can1_RxMsgCountReg       CAN1_CONTROLLER(29)
                     228   ; #define Can1_RxBufStartAdr       CAN1_CONTROLLER(30)
                     229   ; #define Can1_ClockDivideReg      CAN1_CONTROLLER(31)
                     230   ; /* address definitions of Acceptance Code & Mask Registers - RESET MODE */
                     231   ; #define Can1_AcceptCode0Reg      CAN1_CONTROLLER(16)
                     232   ; #define Can1_AcceptCode1Reg      CAN1_CONTROLLER(17)
                     233   ; #define Can1_AcceptCode2Reg      CAN1_CONTROLLER(18)
                     234   ; #define Can1_AcceptCode3Reg      CAN1_CONTROLLER(19)
                     235   ; #define Can1_AcceptMask0Reg      CAN1_CONTROLLER(20)
                     236   ; #define Can1_AcceptMask1Reg      CAN1_CONTROLLER(21)
                     237   ; #define Can1_AcceptMask2Reg      CAN1_CONTROLLER(22)
                     238   ; #define Can1_AcceptMask3Reg      CAN1_CONTROLLER(23)
                     239   ; /* address definitions Rx Buffer - OPERATING MODE - Read only register*/
                     240   ; #define Can1_RxFrameInfo         CAN1_CONTROLLER(16)
                     241   ; #define Can1_RxBuffer1           CAN1_CONTROLLER(17)
                     242   ; #define Can1_RxBuffer2           CAN1_CONTROLLER(18)
                     243   ; #define Can1_RxBuffer3           CAN1_CONTROLLER(19)
                     244   ; #define Can1_RxBuffer4           CAN1_CONTROLLER(20)
                     245   ; #define Can1_RxBuffer5           CAN1_CONTROLLER(21)
                     246   ; #define Can1_RxBuffer6           CAN1_CONTROLLER(22)
                     247   ; #define Can1_RxBuffer7           CAN1_CONTROLLER(23)
                     248   ; #define Can1_RxBuffer8           CAN1_CONTROLLER(24)
                     249   ; #define Can1_RxBuffer9           CAN1_CONTROLLER(25)
                     250   ; #define Can1_RxBuffer10          CAN1_CONTROLLER(26)
                     251   ; #define Can1_RxBuffer11          CAN1_CONTROLLER(27)
                     252   ; #define Can1_RxBuffer12          CAN1_CONTROLLER(28)
                     253   ; /* address definitions of the Tx-Buffer - OPERATING MODE - Write only register */
                     254   ; #define Can1_TxFrameInfo         CAN1_CONTROLLER(16)
                     255   ; #define Can1_TxBuffer1           CAN1_CONTROLLER(17)
                     256   ; #define Can1_TxBuffer2           CAN1_CONTROLLER(18)
                     257   ; #define Can1_TxBuffer3           CAN1_CONTROLLER(19)
                     258   ; #define Can1_TxBuffer4           CAN1_CONTROLLER(20)
                     259   ; #define Can1_TxBuffer5           CAN1_CONTROLLER(21)
                     260   ; #define Can1_TxBuffer6           CAN1_CONTROLLER(22)
                     261   ; #define Can1_TxBuffer7           CAN1_CONTROLLER(23)
                     262   ; #define Can1_TxBuffer8           CAN1_CONTROLLER(24)
                     263   ; #define Can1_TxBuffer9           CAN1_CONTROLLER(25)
                     264   ; #define Can1_TxBuffer10          CAN1_CONTROLLER(26)
                     265   ; #define Can1_TxBuffer11          CAN1_CONTROLLER(27)
                     266   ; #define Can1_TxBuffer12          CAN1_CONTROLLER(28)
                     267   ; /* read only addresses */
                     268   ; #define Can1_TxFrameInfoRd       CAN1_CONTROLLER(96)
                     269   ; #define Can1_TxBufferRd1         CAN1_CONTROLLER(97)
                     270   ; #define Can1_TxBufferRd2         CAN1_CONTROLLER(98)
                     271   ; #define Can1_TxBufferRd3         CAN1_CONTROLLER(99)
                     272   ; #define Can1_TxBufferRd4         CAN1_CONTROLLER(100)
                     273   ; #define Can1_TxBufferRd5         CAN1_CONTROLLER(101)
                     274   ; #define Can1_TxBufferRd6         CAN1_CONTROLLER(102)
                     275   ; #define Can1_TxBufferRd7         CAN1_CONTROLLER(103)
                     276   ; #define Can1_TxBufferRd8         CAN1_CONTROLLER(104)
                     277   ; #define Can1_TxBufferRd9         CAN1_CONTROLLER(105)
                     278   ; #define Can1_TxBufferRd10        CAN1_CONTROLLER(106)
                     279   ; #define Can1_TxBufferRd11        CAN1_CONTROLLER(107)
                     280   ; #define Can1_TxBufferRd12        CAN1_CONTROLLER(108)
                     281   ; /* bit definitions for the Mode & Control Register */
                     282   ; #define RM_RR_Bit 0x01 /* reset mode (request) bit */
                     283   ; #define LOM_Bit 0x02 /* listen only mode bit */
                     284   ; #define STM_Bit 0x04 /* self test mode bit */
                     285   ; #define AFM_Bit 0x08 /* acceptance filter mode bit */
                     286   ; #define SM_Bit  0x10 /* enter sleep mode bit */
                     287   ; /* bit definitions for the Interrupt Enable & Control Register */
                     288   ; #define RIE_Bit 0x01 /* receive interrupt enable bit */
                     289   ; #define TIE_Bit 0x02 /* transmit interrupt enable bit */
                     290   ; #define EIE_Bit 0x04 /* error warning interrupt enable bit */
                     291   ; #define DOIE_Bit 0x08 /* data overrun interrupt enable bit */
                     292   ; #define WUIE_Bit 0x10 /* wake-up interrupt enable bit */
                     293   ; #define EPIE_Bit 0x20 /* error passive interrupt enable bit */
                     294   ; #define ALIE_Bit 0x40 /* arbitration lost interr. enable bit*/
                     295   ; #define BEIE_Bit 0x80 /* bus error interrupt enable bit */
                     296   ; /* bit definitions for the Command Register */
                     297   ; #define TR_Bit 0x01 /* transmission request bit */
                     298   ; #define AT_Bit 0x02 /* abort transmission bit */
                     299   ; #define RRB_Bit 0x04 /* release receive buffer bit */
                     300   ; #define CDO_Bit 0x08 /* clear data overrun bit */
                     301   ; #define SRR_Bit 0x10 /* self reception request bit */
                     302   ; /* bit definitions for the Status Register */
                     303   ; #define RBS_Bit 0x01 /* receive buffer status bit */
                     304   ; #define DOS_Bit 0x02 /* data overrun status bit */
                     305   ; #define TBS_Bit 0x04 /* transmit buffer status bit */
                     306   ; #define TCS_Bit 0x08 /* transmission complete status bit */
                     307   ; #define RS_Bit 0x10 /* receive status bit */
                     308   ; #define TS_Bit 0x20 /* transmit status bit */
                     309   ; #define ES_Bit 0x40 /* error status bit */
                     310   ; #define BS_Bit 0x80 /* bus status bit */
                     311   ; /* bit definitions for the Interrupt Register */
                     312   ; #define RI_Bit 0x01 /* receive interrupt bit */
                     313   ; #define TI_Bit 0x02 /* transmit interrupt bit */
                     314   ; #define EI_Bit 0x04 /* error warning interrupt bit */
                     315   ; #define DOI_Bit 0x08 /* data overrun interrupt bit */
                     316   ; #define WUI_Bit 0x10 /* wake-up interrupt bit */
                     317   ; #define EPI_Bit 0x20 /* error passive interrupt bit */
                     318   ; #define ALI_Bit 0x40 /* arbitration lost interrupt bit */
                     319   ; #define BEI_Bit 0x80 /* bus error interrupt bit */
                     320   ; /* bit definitions for the Bus Timing Registers */
                     321   ; #define SAM_Bit 0x80                        /* sample mode bit 1 == the bus is sampled 3 times, 0 == the bus is sampled once */
                     322   ; /* bit definitions for the Output Control Register OCMODE1, OCMODE0 */
                     323   ; #define BiPhaseMode 0x00 /* bi-phase output mode */
                     324   ; #define NormalMode 0x02 /* normal output mode */
                     325   ; #define ClkOutMode 0x03 /* clock output mode */
                     326   ; /* output pin configuration for TX1 */
                     327   ; #define OCPOL1_Bit 0x20 /* output polarity control bit */
                     328   ; #define Tx1Float 0x00 /* configured as float */
                     329   ; #define Tx1PullDn 0x40 /* configured as pull-down */
                     330   ; #define Tx1PullUp 0x80 /* configured as pull-up */
                     331   ; #define Tx1PshPull 0xC0 /* configured as push/pull */
                     332   ; /* output pin configuration for TX0 */
                     333   ; #define OCPOL0_Bit 0x04 /* output polarity control bit */
                     334   ; #define Tx0Float 0x00 /* configured as float */
                     335   ; #define Tx0PullDn 0x08 /* configured as pull-down */
                     336   ; #define Tx0PullUp 0x10 /* configured as pull-up */
                     337   ; #define Tx0PshPull 0x18 /* configured as push/pull */
                     338   ; /* bit definitions for the Clock Divider Register */
                     339   ; #define DivBy1 0x07 /* CLKOUT = oscillator frequency */
                     340   ; #define DivBy2 0x00 /* CLKOUT = 1/2 oscillator frequency */
                     341   ; #define ClkOff_Bit 0x08 /* clock off bit, control of the CLK OUT pin */
                     342   ; #define RXINTEN_Bit 0x20 /* pin TX1 used for receive interrupt */
                     343   ; #define CBP_Bit 0x40 /* CAN comparator bypass control bit */
                     344   ; #define CANMode_Bit 0x80 /* CAN mode definition bit */
                     345   ; /*- definition of used constants ---------------------------------------*/
                     346   ; #define YES 1
                     347   ; #define NO 0
                     348   ; #define ENABLE 1
                     349   ; #define DISABLE 0
                     350   ; #define ENABLE_N 0
                     351   ; #define DISABLE_N 1
                     352   ; #define INTLEVELACT 0
                     353   ; #define INTEDGEACT 1
                     354   ; #define PRIORITY_LOW 0
                     355   ; #define PRIORITY_HIGH 1
                     356   ; /* default (reset) value for register content, clear register */
                     357   ; #define ClrByte 0x00
                     358   ; /* constant: clear Interrupt Enable Register */
                     359   ; #define ClrIntEnSJA ClrByte
                     360   ; /* definitions for the acceptance code and mask register */
                     361   ; #define DontCare 0xFF
                     362   ; #define BTR0 0x04
                     363   ; #define BTR1 0x73
                     364   ; /*  bus timing values for
                     365   ; **  bit-rate : 100 kBit/s
                     366   ; **  oscillator frequency : 25 MHz, 1 sample per bit, 0 tolerance %
                     367   ; **  maximum tolerated propagation delay : 4450 ns
                     368   ; **  minimum requested propagation delay : 500 ns
                     369   ; **
                     370   ; **  https://www.kvaser.com/support/calculators/bit-timing-calculator/
                     371   ; **  T1 	T2 	BTQ 	SP% 	SJW 	BIT RATE 	ERR% 	BTR0 	BTR1
                     372   ; **  17	8	25	    68	     1	      100	    0	      04	7f
                     373   ; */
                     374   ; // initialisation for Can controller 0
                     375   ; void Init_CanBus_Controller0(void)
                     376   ; {
                     377   _Init_CanBus_Controller0:
                     378   ; // TODO - put your Canbus initialisation code for CanController 0 here
                     379   ; // See section 4.2.1 in the application note for details (PELICAN MODE)
                     380   ; while((Can0_ModeControlReg & RM_RR_Bit ) == ClrByte)
                     381   Init_CanBus_Controller0_1:
080000A4  1039 0050  382          move.b    5242880,D0
080000A8  0000      
080000AA  C03C 0001  383          and.b     #1,D0
080000AE  6612       384          bne.s     Init_CanBus_Controller0_3
                     385   ; {
                     386   ; /* other bits than the reset mode/request bit are unchanged */
                     387   ; Can0_ModeControlReg = Can0_ModeControlReg | RM_RR_Bit ;
080000B0  1039 0050  388          move.b    5242880,D0
080000B4  0000      
080000B6  803C 0001  389          or.b      #1,D0
080000BA  13C0 0050  390          move.b    D0,5242880
080000BE  0000      
080000C0  60E2       391          bra       Init_CanBus_Controller0_1
                     392   Init_CanBus_Controller0_3:
                     393   ; }
                     394   ; /* set the Clock Divider Register */
                     395   ; Can0_ClockDivideReg = CANMode_Bit | CBP_Bit | DivBy2;
080000C2  13FC 00C0  396          move.b    #192,5242942
080000C6  0050 003E 
                     397   ; /* disable CAN interrupts, if required (always necessary after power-on)
                     398   ; (write to SJA1000 Interrupt Enable / Control Register) */
                     399   ; Can0_InterruptEnReg = ClrIntEnSJA;
080000CA  4239 0050  400          clr.b     5242888
080000CE  0008      
                     401   ; /* define acceptance code and mask */
                     402   ; Can0_AcceptCode0Reg = ClrByte;
080000D0  4239 0050  403          clr.b     5242912
080000D4  0020      
                     404   ; Can0_AcceptCode1Reg = ClrByte;
080000D6  4239 0050  405          clr.b     5242914
080000DA  0022      
                     406   ; Can0_AcceptCode2Reg = ClrByte;
080000DC  4239 0050  407          clr.b     5242916
080000E0  0024      
                     408   ; Can0_AcceptCode3Reg = ClrByte;
080000E2  4239 0050  409          clr.b     5242918
080000E6  0026      
                     410   ; Can0_AcceptMask0Reg = DontCare; 
080000E8  13FC 00FF  411          move.b    #255,5242920
080000EC  0050 0028 
                     412   ; Can0_AcceptMask1Reg = DontCare; 
080000F0  13FC 00FF  413          move.b    #255,5242922
080000F4  0050 002A 
                     414   ; Can0_AcceptMask2Reg = DontCare; 
080000F8  13FC 00FF  415          move.b    #255,5242924
080000FC  0050 002C 
                     416   ; Can0_AcceptMask3Reg = DontCare; 
08000100  13FC 00FF  417          move.b    #255,5242926
08000104  0050 002E 
                     418   ; /* configure bus timing */
                     419   ; Can0_BusTiming0Reg = BTR0;
08000108  13FC 0004  420          move.b    #4,5242892
0800010C  0050 000C 
                     421   ; Can0_BusTiming1Reg = BTR1;
08000110  13FC 0073  422          move.b    #115,5242894
08000114  0050 000E 
                     423   ; /* configure CAN outputs: float on TX1, Push/Pull on TX0, normal output mode */
                     424   ; Can0_OutControlReg = Tx1Float | Tx0PshPull | NormalMode;
08000118  13FC 001A  425          move.b    #26,5242896
0800011C  0050 0010 
                     426   ; do { Can0_ModeControlReg = ClrByte;
                     427   Init_CanBus_Controller0_4:
08000120  4239 0050  428          clr.b     5242880
08000124  0000      
08000126  1039 0050  429          move.b    5242880,D0
0800012A  0000      
0800012C  C03C 0001  430          and.b     #1,D0
08000130  66EE       431          bne       Init_CanBus_Controller0_4
08000132  4E75       432          rts
                     433   ; } while((Can0_ModeControlReg & RM_RR_Bit ) != ClrByte);
                     434   ; }
                     435   ; // initialisation for Can controller 1
                     436   ; void Init_CanBus_Controller1(void)
                     437   ; {
                     438   _Init_CanBus_Controller1:
                     439   ; // TODO - put your Canbus initialisation code for CanController 1 here
                     440   ; // See section 4.2.1 in the application note for details (PELICAN MODE)
                     441   ; while((Can1_ModeControlReg & RM_RR_Bit ) == ClrByte)
                     442   Init_CanBus_Controller1_1:
08000134  1039 0050  443          move.b    5243392,D0
08000138  0200      
0800013A  C03C 0001  444          and.b     #1,D0
0800013E  6612       445          bne.s     Init_CanBus_Controller1_3
                     446   ; {
                     447   ; /* other bits than the reset mode/request bit are unchanged */
                     448   ; Can1_ModeControlReg = Can1_ModeControlReg | RM_RR_Bit ;
08000140  1039 0050  449          move.b    5243392,D0
08000144  0200      
08000146  803C 0001  450          or.b      #1,D0
0800014A  13C0 0050  451          move.b    D0,5243392
0800014E  0200      
08000150  60E2       452          bra       Init_CanBus_Controller1_1
                     453   Init_CanBus_Controller1_3:
                     454   ; }
                     455   ; /* set the Clock Divider Register */
                     456   ; Can1_ClockDivideReg = CANMode_Bit | CBP_Bit | DivBy2;
08000152  13FC 00C0  457          move.b    #192,5243454
08000156  0050 023E 
                     458   ; /* disable CAN interrupts, if required (always necessary after power-on)
                     459   ; (write to SJA1000 Interrupt Enable / Control Register) */
                     460   ; Can1_InterruptEnReg = ClrIntEnSJA;
0800015A  4239 0050  461          clr.b     5243400
0800015E  0208      
                     462   ; /* define acceptance code and mask */
                     463   ; Can1_AcceptCode0Reg = ClrByte;
08000160  4239 0050  464          clr.b     5243424
08000164  0220      
                     465   ; Can1_AcceptCode1Reg = ClrByte;
08000166  4239 0050  466          clr.b     5243426
0800016A  0222      
                     467   ; Can1_AcceptCode2Reg = ClrByte;
0800016C  4239 0050  468          clr.b     5243428
08000170  0224      
                     469   ; Can1_AcceptCode3Reg = ClrByte;
08000172  4239 0050  470          clr.b     5243430
08000176  0226      
                     471   ; Can1_AcceptMask0Reg = DontCare; 
08000178  13FC 00FF  472          move.b    #255,5243432
0800017C  0050 0228 
                     473   ; Can1_AcceptMask1Reg = DontCare; 
08000180  13FC 00FF  474          move.b    #255,5243434
08000184  0050 022A 
                     475   ; Can1_AcceptMask2Reg = DontCare; 
08000188  13FC 00FF  476          move.b    #255,5243436
0800018C  0050 022C 
                     477   ; Can1_AcceptMask3Reg = DontCare; 
08000190  13FC 00FF  478          move.b    #255,5243438
08000194  0050 022E 
                     479   ; /* configure bus timing */
                     480   ; Can1_BusTiming0Reg = BTR0;
08000198  13FC 0004  481          move.b    #4,5243404
0800019C  0050 020C 
                     482   ; Can1_BusTiming1Reg = BTR1;
080001A0  13FC 0073  483          move.b    #115,5243406
080001A4  0050 020E 
                     484   ; /* configure CAN outputs: float on TX1, Push/Pull on TX0, normal output mode */
                     485   ; Can1_OutControlReg = Tx1Float | Tx0PshPull | NormalMode;
080001A8  13FC 001A  486          move.b    #26,5243408
080001AC  0050 0210 
                     487   ; do { Can1_ModeControlReg = ClrByte;
                     488   Init_CanBus_Controller1_4:
080001B0  4239 0050  489          clr.b     5243392
080001B4  0200      
080001B6  1039 0050  490          move.b    5243392,D0
080001BA  0200      
080001BC  C03C 0001  491          and.b     #1,D0
080001C0  66EE       492          bne       Init_CanBus_Controller1_4
080001C2  4E75       493          rts
                     494   ; } while((Can1_ModeControlReg & RM_RR_Bit ) != ClrByte);
                     495   ; }
                     496   ; // Transmit for sending a message via Can controller 0
                     497   ; void CanBus0_Transmit(void)
                     498   ; {
                     499   _CanBus0_Transmit:
                     500   ; // TODO - put your Canbus transmit code for CanController 0 here
                     501   ; // See section 4.2.2 in the application note for details (PELICAN MODE)
                     502   ; /* wait until the Transmit Buffer is released */
                     503   ; do
                     504   ; {
                     505   CanBus0_Transmit_1:
                     506   ; } while((Can0_StatusReg & TBS_Bit) != TBS_Bit);
080001C4  1039 0050  507          move.b    5242884,D0
080001C8  0004      
080001CA  C03C 0004  508          and.b     #4,D0
080001CE  0C00 0004  509          cmp.b     #4,D0
080001D2  66F0       510          bne       CanBus0_Transmit_1
                     511   ; /* Standard Frame message transmitted */
                     512   ; Can0_TxFrameInfo = 0x06;
080001D4  13FC 0006  513          move.b    #6,5242912
080001D8  0050 0020 
                     514   ; Can0_TxBuffer1 = 0xA5;
080001DC  13FC 00A5  515          move.b    #165,5242914
080001E0  0050 0022 
                     516   ; Can0_TxBuffer2 = 0x20;
080001E4  13FC 0020  517          move.b    #32,5242916
080001E8  0050 0024 
                     518   ; Can0_TxBuffer3 = 0x51; // start trans
080001EC  13FC 0051  519          move.b    #81,5242918
080001F0  0050 0026 
                     520   ; Can0_TxBuffer4 = 0x52;
080001F4  13FC 0052  521          move.b    #82,5242920
080001F8  0050 0028 
                     522   ; Can0_TxBuffer5 = 0x53;
080001FC  13FC 0053  523          move.b    #83,5242922
08000200  0050 002A 
                     524   ; Can0_TxBuffer6 = 0x54;
08000204  13FC 0054  525          move.b    #84,5242924
08000208  0050 002C 
                     526   ; Can0_TxBuffer7 = 0x55;
0800020C  13FC 0055  527          move.b    #85,5242926
08000210  0050 002E 
                     528   ; Can0_TxBuffer8 = 0x56;
08000214  13FC 0056  529          move.b    #86,5242928
08000218  0050 0030 
                     530   ; Can0_CommandReg = TR_Bit;
0800021C  13FC 0001  531          move.b    #1,5242882
08000220  0050 0002 
08000224  4E75       532          rts
                     533   ; }
                     534   ; // Transmit for sending a message via Can controller 1
                     535   ; void CanBus1_Transmit(void)
                     536   ; {
                     537   _CanBus1_Transmit:
                     538   ; // TODO - put your Canbus transmit code for CanController 1 here
                     539   ; // See section 4.2.2 in the application note for details (PELICAN MODE)
                     540   ; do
                     541   ; {
                     542   CanBus1_Transmit_1:
                     543   ; } while((Can1_StatusReg & TBS_Bit) != TBS_Bit);
08000226  1039 0050  544          move.b    5243396,D0
0800022A  0204      
0800022C  C03C 0004  545          and.b     #4,D0
08000230  0C00 0004  546          cmp.b     #4,D0
08000234  66F0       547          bne       CanBus1_Transmit_1
                     548   ; /* Standard Frame message transmitted */
                     549   ; Can1_TxFrameInfo = 0x06;
08000236  13FC 0006  550          move.b    #6,5243424
0800023A  0050 0220 
                     551   ; Can1_TxBuffer1 = 0xA5;
0800023E  13FC 00A5  552          move.b    #165,5243426
08000242  0050 0222 
                     553   ; Can1_TxBuffer2 = 0x20;
08000246  13FC 0020  554          move.b    #32,5243428
0800024A  0050 0224 
                     555   ; Can1_TxBuffer3 = 0x51; // start trans
0800024E  13FC 0051  556          move.b    #81,5243430
08000252  0050 0226 
                     557   ; Can1_TxBuffer4 = 0x52;
08000256  13FC 0052  558          move.b    #82,5243432
0800025A  0050 0228 
                     559   ; Can1_TxBuffer5 = 0x53;
0800025E  13FC 0053  560          move.b    #83,5243434
08000262  0050 022A 
                     561   ; Can1_TxBuffer6 = 0x54;
08000266  13FC 0054  562          move.b    #84,5243436
0800026A  0050 022C 
                     563   ; Can1_TxBuffer7 = 0x55;
0800026E  13FC 0055  564          move.b    #85,5243438
08000272  0050 022E 
                     565   ; Can1_TxBuffer8 = 0x56;
08000276  13FC 0056  566          move.b    #86,5243440
0800027A  0050 0230 
                     567   ; Can1_CommandReg = TR_Bit;
0800027E  13FC 0001  568          move.b    #1,5243394
08000282  0050 0202 
08000286  4E75       569          rts
                     570   ; }
                     571   ; // Receive for reading a received message via Can controller 0
                     572   ; void CanBus0_Receive(void)
                     573   ; {
                     574   _CanBus0_Receive:
08000288  4E56 FFF8  575          link      A6,#-8
0800028C  2F0A       576          move.l    A2,-(A7)
0800028E  45EE FFF8  577          lea       -8(A6),A2
                     578   ; // TODO - put your Canbus receive code for CanController 0 here
                     579   ; // See section 4.2.4 in the application note for details (PELICAN MODE)
                     580   ; unsigned char buffer[8];
                     581   ; do{
                     582   CanBus0_Receive_1:
                     583   ; }while( (Can0_StatusReg & RBS_Bit) != RBS_Bit);
08000292  1039 0050  584          move.b    5242884,D0
08000296  0004      
08000298  C03C 0001  585          and.b     #1,D0
0800029C  0C00 0001  586          cmp.b     #1,D0
080002A0  66F0       587          bne       CanBus0_Receive_1
                     588   ; buffer[0] = Can0_RxBuffer1 & 0xff;
080002A2  1039 0050  589          move.b    5242914,D0
080002A6  0022      
080002A8  C07C 00FF  590          and.w     #255,D0
080002AC  C07C 00FF  591          and.w     #255,D0
080002B0  1480       592          move.b    D0,(A2)
                     593   ; buffer[1] = Can0_RxBuffer2 & 0xff;
080002B2  1039 0050  594          move.b    5242916,D0
080002B6  0024      
080002B8  C07C 00FF  595          and.w     #255,D0
080002BC  C07C 00FF  596          and.w     #255,D0
080002C0  1540 0001  597          move.b    D0,1(A2)
                     598   ; buffer[2] = Can0_RxBuffer3;
080002C4  1579 0050  599          move.b    5242918,2(A2)
080002C8  0026 0002 
                     600   ; buffer[3] = Can0_RxBuffer4;
080002CC  1579 0050  601          move.b    5242920,3(A2)
080002D0  0028 0003 
                     602   ; buffer[4] = Can0_RxBuffer5;
080002D4  1579 0050  603          move.b    5242922,4(A2)
080002D8  002A 0004 
                     604   ; buffer[5] = Can0_RxBuffer6;
080002DC  1579 0050  605          move.b    5242924,5(A2)
080002E0  002C 0005 
                     606   ; buffer[6] = Can0_RxBuffer7;
080002E4  1579 0050  607          move.b    5242926,6(A2)
080002E8  002E 0006 
                     608   ; buffer[7] = Can0_RxBuffer8;
080002EC  1579 0050  609          move.b    5242928,7(A2)
080002F0  0030 0007 
                     610   ; Can0_CommandReg = Can0_CommandReg & RRB_Bit;
080002F4  1039 0050  611          move.b    5242882,D0
080002F8  0002      
080002FA  C03C 0004  612          and.b     #4,D0
080002FE  13C0 0050  613          move.b    D0,5242882
08000302  0002      
                     614   ; printf("Can0RV : %c %c %c %c %c %c\n", buffer[2], buffer[3], buffer[4], buffer[5], buffer[6], buffer[7]);
08000304  122A 0007  615          move.b    7(A2),D1
08000308  C2BC 0000  616          and.l     #255,D1
0800030C  00FF      
0800030E  2F01       617          move.l    D1,-(A7)
08000310  122A 0006  618          move.b    6(A2),D1
08000314  C2BC 0000  619          and.l     #255,D1
08000318  00FF      
0800031A  2F01       620          move.l    D1,-(A7)
0800031C  122A 0005  621          move.b    5(A2),D1
08000320  C2BC 0000  622          and.l     #255,D1
08000324  00FF      
08000326  2F01       623          move.l    D1,-(A7)
08000328  122A 0004  624          move.b    4(A2),D1
0800032C  C2BC 0000  625          and.l     #255,D1
08000330  00FF      
08000332  2F01       626          move.l    D1,-(A7)
08000334  122A 0003  627          move.b    3(A2),D1
08000338  C2BC 0000  628          and.l     #255,D1
0800033C  00FF      
0800033E  2F01       629          move.l    D1,-(A7)
08000340  122A 0002  630          move.b    2(A2),D1
08000344  C2BC 0000  631          and.l     #255,D1
08000348  00FF      
0800034A  2F01       632          move.l    D1,-(A7)
0800034C  4879 0800  633          pea       @canbus~2_1.L
08000350  0F46      
08000352  4EB9 0800  634          jsr       _printf
08000356  04E2      
08000358  DEFC 001C  635          add.w     #28,A7
0800035C  245F       636          move.l    (A7)+,A2
0800035E  4E5E       637          unlk      A6
08000360  4E75       638          rts
                     639   ; }
                     640   ; // Receive for reading a received message via Can controller 1
                     641   ; void CanBus1_Receive(void)
                     642   ; {
                     643   _CanBus1_Receive:
08000362  4E56 FFF8  644          link      A6,#-8
08000366  2F0A       645          move.l    A2,-(A7)
08000368  45EE FFF8  646          lea       -8(A6),A2
                     647   ; // TODO - put your Canbus receive code for CanController 1 here
                     648   ; // See section 4.2.4 in the application note for details (PELICAN MODE)
                     649   ; unsigned char buffer[8];
                     650   ; do{
                     651   CanBus1_Receive_1:
                     652   ; }while( (Can1_StatusReg & RBS_Bit) == 0);
0800036C  1039 0050  653          move.b    5243396,D0
08000370  0204      
08000372  C03C 0001  654          and.b     #1,D0
08000376  67F4       655          beq       CanBus1_Receive_1
                     656   ; buffer[0] = Can1_RxBuffer1 & 0xff;
08000378  1039 0050  657          move.b    5243426,D0
0800037C  0222      
0800037E  C07C 00FF  658          and.w     #255,D0
08000382  C07C 00FF  659          and.w     #255,D0
08000386  1480       660          move.b    D0,(A2)
                     661   ; buffer[1] = Can1_RxBuffer2 & 0xff;
08000388  1039 0050  662          move.b    5243428,D0
0800038C  0224      
0800038E  C07C 00FF  663          and.w     #255,D0
08000392  C07C 00FF  664          and.w     #255,D0
08000396  1540 0001  665          move.b    D0,1(A2)
                     666   ; buffer[2] = Can1_RxBuffer3;
0800039A  1579 0050  667          move.b    5243430,2(A2)
0800039E  0226 0002 
                     668   ; buffer[3] = Can1_RxBuffer4;
080003A2  1579 0050  669          move.b    5243432,3(A2)
080003A6  0228 0003 
                     670   ; buffer[4] = Can1_RxBuffer5;
080003AA  1579 0050  671          move.b    5243434,4(A2)
080003AE  022A 0004 
                     672   ; buffer[5] = Can1_RxBuffer6;
080003B2  1579 0050  673          move.b    5243436,5(A2)
080003B6  022C 0005 
                     674   ; buffer[6] = Can1_RxBuffer7;
080003BA  1579 0050  675          move.b    5243438,6(A2)
080003BE  022E 0006 
                     676   ; buffer[7] = Can1_RxBuffer8;
080003C2  1579 0050  677          move.b    5243440,7(A2)
080003C6  0230 0007 
                     678   ; Can1_CommandReg = Can1_CommandReg & RRB_Bit;
080003CA  1039 0050  679          move.b    5243394,D0
080003CE  0202      
080003D0  C03C 0004  680          and.b     #4,D0
080003D4  13C0 0050  681          move.b    D0,5243394
080003D8  0202      
                     682   ; printf("Can1RV : %c %c %c %c %c %c\n", buffer[2], buffer[3], buffer[4], buffer[5], buffer[6], buffer[7]);
080003DA  122A 0007  683          move.b    7(A2),D1
080003DE  C2BC 0000  684          and.l     #255,D1
080003E2  00FF      
080003E4  2F01       685          move.l    D1,-(A7)
080003E6  122A 0006  686          move.b    6(A2),D1
080003EA  C2BC 0000  687          and.l     #255,D1
080003EE  00FF      
080003F0  2F01       688          move.l    D1,-(A7)
080003F2  122A 0005  689          move.b    5(A2),D1
080003F6  C2BC 0000  690          and.l     #255,D1
080003FA  00FF      
080003FC  2F01       691          move.l    D1,-(A7)
080003FE  122A 0004  692          move.b    4(A2),D1
08000402  C2BC 0000  693          and.l     #255,D1
08000406  00FF      
08000408  2F01       694          move.l    D1,-(A7)
0800040A  122A 0003  695          move.b    3(A2),D1
0800040E  C2BC 0000  696          and.l     #255,D1
08000412  00FF      
08000414  2F01       697          move.l    D1,-(A7)
08000416  122A 0002  698          move.b    2(A2),D1
0800041A  C2BC 0000  699          and.l     #255,D1
0800041E  00FF      
08000420  2F01       700          move.l    D1,-(A7)
08000422  4879 0800  701          pea       @canbus~2_2.L
08000426  0F62      
08000428  4EB9 0800  702          jsr       _printf
0800042C  04E2      
0800042E  DEFC 001C  703          add.w     #28,A7
08000432  245F       704          move.l    (A7)+,A2
08000434  4E5E       705          unlk      A6
08000436  4E75       706          rts
                     707   ; }
                     708   ; void delay(void) {
                     709   _delay:
08000438  2F02       710          move.l    D2,-(A7)
                     711   ; int  i ;
                     712   ; for(i = 0; i < 50000; i ++)
0800043A  4282       713          clr.l     D2
                     714   delay_1:
0800043C  0C82 0000  715          cmp.l     #50000,D2
08000440  C350      
08000442  6C04       716          bge.s     delay_3
08000444  5282       717          addq.l    #1,D2
08000446  60F4       718          bra       delay_1
                     719   delay_3:
08000448  241F       720          move.l    (A7)+,D2
0800044A  4E75       721          rts
                     722   ; ;
                     723   ; }
                     724   ; void CanBusTest(void)
                     725   ; {
                     726   _CanBusTest:
0800044C  2F0A       727          move.l    A2,-(A7)
0800044E  45F9 0800  728          lea       _printf.L,A2
08000452  04E2      
                     729   ; // initialise the two Can controllers
                     730   ; Init_CanBus_Controller0();
08000454  4EB9 0800  731          jsr       _Init_CanBus_Controller0
08000458  00A4      
                     732   ; Init_CanBus_Controller1();
0800045A  4EB9 0800  733          jsr       _Init_CanBus_Controller1
0800045E  0134      
                     734   ; printf("\r\n\r\n---- CANBUS Test ----\r\n") ;
08000460  4879 0800  735          pea       @canbus~2_3.L
08000464  0F7E      
08000466  4E92       736          jsr       (A2)
08000468  584F       737          addq.w    #4,A7
                     738   ; // simple application to alternately transmit and receive messages from each of two nodes
                     739   ; while(1)    {
                     740   CanBusTest_1:
                     741   ; //delay();                    // write a routine to delay say 1/2 second so we don't flood the network with messages to0 quickly
                     742   ; printf("ping\n");
0800046A  4879 0800  743          pea       @canbus~2_4.L
0800046E  0F9A      
08000470  4E92       744          jsr       (A2)
08000472  584F       745          addq.w    #4,A7
                     746   ; CanBus0_Transmit() ;       // transmit a message via Controller 0
08000474  4EB9 0800  747          jsr       _CanBus0_Transmit
08000478  01C4      
                     748   ; printf("trans\n");
0800047A  4879 0800  749          pea       @canbus~2_5.L
0800047E  0FA0      
08000480  4E92       750          jsr       (A2)
08000482  584F       751          addq.w    #4,A7
                     752   ; CanBus1_Receive() ;        // receive a message via Controller 1 (and display it)
08000484  4EB9 0800  753          jsr       _CanBus1_Receive
08000488  0362      
                     754   ; printf("\r\n") ;
0800048A  4879 0800  755          pea       @canbus~2_6.L
0800048E  0FA8      
08000490  4E92       756          jsr       (A2)
08000492  584F       757          addq.w    #4,A7
                     758   ; //delay();                    // write a routine to delay say 1/2 second so we don't flood the network with messages to0 quickly
                     759   ; printf("pong\n");
08000494  4879 0800  760          pea       @canbus~2_7.L
08000498  0FAC      
0800049A  4E92       761          jsr       (A2)
0800049C  584F       762          addq.w    #4,A7
                     763   ; CanBus1_Transmit() ;        // transmit a message via Controller 1
0800049E  4EB9 0800  764          jsr       _CanBus1_Transmit
080004A2  0226      
                     765   ; CanBus0_Receive() ;         // receive a message via Controller 0 (and display it)
080004A4  4EB9 0800  766          jsr       _CanBus0_Receive
080004A8  0288      
                     767   ; printf("\r\n") ;
080004AA  4879 0800  768          pea       @canbus~2_6.L
080004AE  0FA8      
080004B0  4E92       769          jsr       (A2)
080004B2  584F       770          addq.w    #4,A7
080004B4  60B4       771          bra       CanBusTest_1
                     772   ; }
                     773   ; }
                     774   ; int main(void)
                     775   ; {
                     776   _main:
                     777   ; Init_RS232();
080004B6  4EB9 0800  778          jsr       _Init_RS232
080004BA  003E      
                     779   ; printf("\n\nStart.....");
080004BC  4879 0800  780          pea       @canbus~2_8.L
080004C0  0FB2      
080004C2  4EB9 0800  781          jsr       _printf
080004C6  04E2      
080004C8  584F       782          addq.w    #4,A7
                     783   ; CanBusTest();
080004CA  4EB9 0800  784          jsr       _CanBusTest
080004CE  044C      
                     785   ; printf("\n\nDone.....");
080004D0  4879 0800  786          pea       @canbus~2_9.L
080004D4  0FC0      
080004D6  4EB9 0800  787          jsr       _printf
080004DA  04E2      
080004DC  584F       788          addq.w    #4,A7
                     789   ; return 0 ;
080004DE  4280       790          clr.l     D0
080004E0  4E75       791          rts
                     792   ; }
                     793   _printf:
080004E2  4E56 FFFC  794          link      A6,#-4
080004E6  2F02       795          move.l    D2,-(A7)
080004E8  41EE 0008  796          lea       8(A6),A0
080004EC  5848       797          addq.w    #4,A0
080004EE  2408       798          move.l    A0,D2
080004F0  2F02       799          move.l    D2,-(A7)
080004F2  2F2E 0008  800          move.l    8(A6),-(A7)
080004F6  42A7       801          clr.l     -(A7)
080004F8  4EB9 0800  802          jsr       _doprint
080004FC  05BA      
080004FE  DEFC 000C  803          add.w     #12,A7
08000502  2D40 FFFC  804          move.l    D0,-4(A6)
08000506  4282       805          clr.l     D2
08000508  202E FFFC  806          move.l    -4(A6),D0
0800050C  241F       807          move.l    (A7)+,D2
0800050E  4E5E       808          unlk      A6
08000510  4E75       809          rts
                     810   @doprint_copy:
08000512  4E56 0000  811          link      A6,#0
08000516  206E 0008  812          move.l    8(A6),A0
0800051A  4A90       813          tst.l     (A0)
0800051C  6710       814          beq.s     @doprint_copy_1
0800051E  202E 000C  815          move.l    12(A6),D0
08000522  206E 0008  816          move.l    8(A6),A0
08000526  2250       817          move.l    (A0),A1
08000528  5290       818          addq.l    #1,(A0)
0800052A  1280       819          move.b    D0,(A1)
0800052C  600C       820          bra.s     @doprint_copy_2
                     821   @doprint_copy_1:
0800052E  2F2E 000C  822          move.l    12(A6),-(A7)
08000532  4EB9 0800  823          jsr       _putch
08000536  0E0C      
08000538  584F       824          addq.w    #4,A7
                     825   @doprint_copy_2:
0800053A  4E5E       826          unlk      A6
0800053C  4E75       827          rts
                     828   @doprint_getval:
0800053E  4E56 0000  829          link      A6,#0
08000542  48E7 3000  830          movem.l   D2/D3,-(A7)
08000546  262E 0008  831          move.l    8(A6),D3
0800054A  4282       832          clr.l     D2
0800054C  2043       833          move.l    D3,A0
0800054E  2050       834          move.l    (A0),A0
08000550  1010       835          move.b    (A0),D0
08000552  0C00 002A  836          cmp.b     #42,D0
08000556  6612       837          bne.s     @doprint_getval_1
08000558  206E 000C  838          move.l    12(A6),A0
0800055C  2250       839          move.l    (A0),A1
0800055E  5890       840          addq.l    #4,(A0)
08000560  2411       841          move.l    (A1),D2
08000562  2043       842          move.l    D3,A0
08000564  5290       843          addq.l    #1,(A0)
08000566  6000 0048  844          bra       @doprint_getval_5
                     845   @doprint_getval_1:
0800056A  7001       846          moveq     #1,D0
0800056C  2043       847          move.l    D3,A0
0800056E  2050       848          move.l    (A0),A0
08000570  1210       849          move.b    (A0),D1
08000572  4881       850          ext.w     D1
08000574  48C1       851          ext.l     D1
08000576  D081       852          add.l     D1,D0
08000578  41F9 0800  853          lea       __ctype.L,A0
0800057C  0FD8      
0800057E  1030 0800  854          move.b    0(A0,D0.L),D0
08000582  C03C 0004  855          and.b     #4,D0
08000586  6728       856          beq.s     @doprint_getval_5
08000588  2F02       857          move.l    D2,-(A7)
0800058A  4878 000A  858          pea       10
0800058E  4EB9 0800  859          jsr       LMUL
08000592  0D6C      
08000594  2017       860          move.l    (A7),D0
08000596  504F       861          addq.w    #8,A7
08000598  2043       862          move.l    D3,A0
0800059A  2250       863          move.l    (A0),A1
0800059C  5290       864          addq.l    #1,(A0)
0800059E  1211       865          move.b    (A1),D1
080005A0  4881       866          ext.w     D1
080005A2  48C1       867          ext.l     D1
080005A4  D081       868          add.l     D1,D0
080005A6  0480 0000  869          sub.l     #48,D0
080005AA  0030      
080005AC  2400       870          move.l    D0,D2
080005AE  60BA       871          bra       @doprint_getval_1
                     872   @doprint_getval_5:
080005B0  2002       873          move.l    D2,D0
080005B2  4CDF 000C  874          movem.l   (A7)+,D2/D3
080005B6  4E5E       875          unlk      A6
080005B8  4E75       876          rts
                     877   _doprint:
080005BA  4E56 FFCC  878          link      A6,#-52
080005BE  48E7 3F3C  879          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
080005C2  45EE 0008  880          lea       8(A6),A2
080005C6  47F9 0800  881          lea       @doprint_copy.L,A3
080005CA  0512      
080005CC  49F9 0800  882          lea       _ultoa.L,A4
080005D0  0CF4      
080005D2  4286       883          clr.l     D6
                     884   doprint_1:
080005D4  206E 000C  885          move.l    12(A6),A0
080005D8  4A10       886          tst.b     (A0)
080005DA  6700 05F0  887          beq       doprint_3
080005DE  206E 000C  888          move.l    12(A6),A0
080005E2  1010       889          move.b    (A0),D0
080005E4  0C00 0025  890          cmp.b     #37,D0
080005E8  671C       891          beq.s     doprint_4
080005EA  206E 000C  892          move.l    12(A6),A0
080005EE  52AE 000C  893          addq.l    #1,12(A6)
080005F2  1210       894          move.b    (A0),D1
080005F4  4881       895          ext.w     D1
080005F6  48C1       896          ext.l     D1
080005F8  2F01       897          move.l    D1,-(A7)
080005FA  2F0A       898          move.l    A2,-(A7)
080005FC  4E93       899          jsr       (A3)
080005FE  504F       900          addq.w    #8,A7
08000600  5286       901          addq.l    #1,D6
08000602  6000 05C4  902          bra       doprint_2
                     903   doprint_4:
08000606  52AE 000C  904          addq.l    #1,12(A6)
0800060A  422E FFD3  905          clr.b     -45(A6)
0800060E  422E FFD2  906          clr.b     -46(A6)
08000612  422E FFD0  907          clr.b     -48(A6)
08000616  422E FFCF  908          clr.b     -49(A6)
0800061A  422E FFCE  909          clr.b     -50(A6)
0800061E  422E FFCD  910          clr.b     -51(A6)
08000622  42AE FFFC  911          clr.l     -4(A6)
08000626  7AFF       912          moveq     #-1,D5
08000628  41EE FFDC  913          lea       -36(A6),A0
0800062C  2608       914          move.l    A0,D3
0800062E  2408       915          move.l    A0,D2
                     916   doprint_6:
08000630  206E 000C  917          move.l    12(A6),A0
08000634  1010       918          move.b    (A0),D0
08000636  4880       919          ext.w     D0
08000638  48C0       920          ext.l     D0
0800063A  0C80 0000  921          cmp.l     #43,D0
0800063E  002B      
08000640  6730       922          beq.s     doprint_12
08000642  6E18       923          bgt.s     doprint_15
08000644  0C80 0000  924          cmp.l     #35,D0
08000648  0023      
0800064A  6700 003E  925          beq       doprint_14
0800064E  6E00 0046  926          bgt       doprint_9
08000652  0C80 0000  927          cmp.l     #32,D0
08000656  0020      
08000658  6724       928          beq.s     doprint_13
0800065A  603A       929          bra.s     doprint_9
                     930   doprint_15:
0800065C  0C80 0000  931          cmp.l     #45,D0
08000660  002D      
08000662  6702       932          beq.s     doprint_11
08000664  6030       933          bra.s     doprint_9
                     934   doprint_11:
08000666  1D7C 0001  935          move.b    #1,-51(A6)
0800066A  FFCD      
0800066C  52AE 000C  936          addq.l    #1,12(A6)
08000670  6026       937          bra.s     doprint_7
                     938   doprint_12:
08000672  1D7C 0001  939          move.b    #1,-50(A6)
08000676  FFCE      
08000678  52AE 000C  940          addq.l    #1,12(A6)
0800067C  601A       941          bra.s     doprint_7
                     942   doprint_13:
0800067E  1D7C 0001  943          move.b    #1,-49(A6)
08000682  FFCF      
08000684  52AE 000C  944          addq.l    #1,12(A6)
08000688  600E       945          bra.s     doprint_7
                     946   doprint_14:
0800068A  1D7C 0001  947          move.b    #1,-48(A6)
0800068E  FFD0      
08000690  52AE 000C  948          addq.l    #1,12(A6)
08000694  6002       949          bra.s     doprint_7
                     950   doprint_9:
08000696  6002       951          bra.s     doprint_8
                     952   doprint_7:
08000698  6096       953          bra       doprint_6
                     954   doprint_8:
0800069A  206E 000C  955          move.l    12(A6),A0
0800069E  1010       956          move.b    (A0),D0
080006A0  0C00 0030  957          cmp.b     #48,D0
080006A4  660A       958          bne.s     doprint_16
080006A6  52AE 000C  959          addq.l    #1,12(A6)
080006AA  1D7C 0001  960          move.b    #1,-46(A6)
080006AE  FFD2      
                     961   doprint_16:
080006B0  486E 0010  962          pea       16(A6)
080006B4  486E 000C  963          pea       12(A6)
080006B8  4EB9 0800  964          jsr       @doprint_getval
080006BC  053E      
080006BE  504F       965          addq.w    #8,A7
080006C0  2A40       966          move.l    D0,A5
080006C2  206E 000C  967          move.l    12(A6),A0
080006C6  1010       968          move.b    (A0),D0
080006C8  0C00 002E  969          cmp.b     #46,D0
080006CC  6616       970          bne.s     doprint_18
080006CE  52AE 000C  971          addq.l    #1,12(A6)
080006D2  486E 0010  972          pea       16(A6)
080006D6  486E 000C  973          pea       12(A6)
080006DA  4EB9 0800  974          jsr       @doprint_getval
080006DE  053E      
080006E0  504F       975          addq.w    #8,A7
080006E2  2A00       976          move.l    D0,D5
                     977   doprint_18:
080006E4  206E 000C  978          move.l    12(A6),A0
080006E8  1010       979          move.b    (A0),D0
080006EA  0C00 006C  980          cmp.b     #108,D0
080006EE  660A       981          bne.s     doprint_20
080006F0  52AE 000C  982          addq.l    #1,12(A6)
080006F4  1D7C 0001  983          move.b    #1,-45(A6)
080006F8  FFD3      
                     984   doprint_20:
080006FA  206E 000C  985          move.l    12(A6),A0
080006FE  1010       986          move.b    (A0),D0
08000700  4880       987          ext.w     D0
08000702  48C0       988          ext.l     D0
08000704  0C80 0000  989          cmp.l     #111,D0
08000708  006F      
0800070A  6700 00D8  990          beq       doprint_27
0800070E  6E34       991          bgt.s     doprint_33
08000710  0C80 0000  992          cmp.l     #100,D0
08000714  0064      
08000716  6700 0054  993          beq       doprint_24
0800071A  6E1C       994          bgt.s     doprint_34
0800071C  0C80 0000  995          cmp.l     #99,D0
08000720  0063      
08000722  6700 0130  996          beq       doprint_30
08000726  6E00 0174  997          bgt       doprint_22
0800072A  0C80 0000  998          cmp.l     #88,D0
0800072E  0058      
08000730  6700 00EA  999          beq       doprint_28
08000734  6000 0166 1000          bra       doprint_22
                    1001   doprint_34:
08000738  0C80 0000 1002          cmp.l     #105,D0
0800073C  0069      
0800073E  672C      1003          beq.s     doprint_24
08000740  6000 015A 1004          bra       doprint_22
                    1005   doprint_33:
08000744  0C80 0000 1006          cmp.l     #117,D0
08000748  0075      
0800074A  6700 0060 1007          beq       doprint_26
0800074E  6E0E      1008          bgt.s     doprint_35
08000750  0C80 0000 1009          cmp.l     #115,D0
08000754  0073      
08000756  6700 0124 1010          beq       doprint_31
0800075A  6000 0140 1011          bra       doprint_22
                    1012   doprint_35:
0800075E  0C80 0000 1013          cmp.l     #120,D0
08000762  0078      
08000764  6700 00B6 1014          beq       doprint_28
08000768  6000 0132 1015          bra       doprint_22
                    1016   doprint_24:
0800076C  4A2E FFD3 1017          tst.b     -45(A6)
08000770  671C      1018          beq.s     doprint_36
08000772  4878 000A 1019          pea       10
08000776  2F03      1020          move.l    D3,-(A7)
08000778  206E 0010 1021          move.l    16(A6),A0
0800077C  58AE 0010 1022          addq.l    #4,16(A6)
08000780  2F10      1023          move.l    (A0),-(A7)
08000782  4EB9 0800 1024          jsr       _ltoa
08000786  0C6C      
08000788  DEFC 000C 1025          add.w     #12,A7
0800078C  601A      1026          bra.s     doprint_37
                    1027   doprint_36:
0800078E  4878 000A 1028          pea       10
08000792  2F03      1029          move.l    D3,-(A7)
08000794  206E 0010 1030          move.l    16(A6),A0
08000798  58AE 0010 1031          addq.l    #4,16(A6)
0800079C  2F10      1032          move.l    (A0),-(A7)
0800079E  4EB9 0800 1033          jsr       _ltoa
080007A2  0C6C      
080007A4  DEFC 000C 1034          add.w     #12,A7
                    1035   doprint_37:
080007A8  6000 0100 1036          bra       doprint_23
                    1037   doprint_26:
080007AC  4A2E FFD3 1038          tst.b     -45(A6)
080007B0  6718      1039          beq.s     doprint_38
080007B2  4878 000A 1040          pea       10
080007B6  2F03      1041          move.l    D3,-(A7)
080007B8  206E 0010 1042          move.l    16(A6),A0
080007BC  58AE 0010 1043          addq.l    #4,16(A6)
080007C0  2F10      1044          move.l    (A0),-(A7)
080007C2  4E94      1045          jsr       (A4)
080007C4  DEFC 000C 1046          add.w     #12,A7
080007C8  6016      1047          bra.s     doprint_39
                    1048   doprint_38:
080007CA  4878 000A 1049          pea       10
080007CE  2F03      1050          move.l    D3,-(A7)
080007D0  206E 0010 1051          move.l    16(A6),A0
080007D4  58AE 0010 1052          addq.l    #4,16(A6)
080007D8  2F10      1053          move.l    (A0),-(A7)
080007DA  4E94      1054          jsr       (A4)
080007DC  DEFC 000C 1055          add.w     #12,A7
                    1056   doprint_39:
080007E0  6000 00C8 1057          bra       doprint_23
                    1058   doprint_27:
080007E4  4A2E FFD3 1059          tst.b     -45(A6)
080007E8  6718      1060          beq.s     doprint_40
080007EA  4878 0008 1061          pea       8
080007EE  2F03      1062          move.l    D3,-(A7)
080007F0  206E 0010 1063          move.l    16(A6),A0
080007F4  58AE 0010 1064          addq.l    #4,16(A6)
080007F8  2F10      1065          move.l    (A0),-(A7)
080007FA  4E94      1066          jsr       (A4)
080007FC  DEFC 000C 1067          add.w     #12,A7
08000800  6016      1068          bra.s     doprint_41
                    1069   doprint_40:
08000802  4878 0008 1070          pea       8
08000806  2F03      1071          move.l    D3,-(A7)
08000808  206E 0010 1072          move.l    16(A6),A0
0800080C  58AE 0010 1073          addq.l    #4,16(A6)
08000810  2F10      1074          move.l    (A0),-(A7)
08000812  4E94      1075          jsr       (A4)
08000814  DEFC 000C 1076          add.w     #12,A7
                    1077   doprint_41:
08000818  6000 0090 1078          bra       doprint_23
                    1079   doprint_28:
0800081C  4A2E FFD3 1080          tst.b     -45(A6)
08000820  6718      1081          beq.s     doprint_42
08000822  4878 0010 1082          pea       16
08000826  2F03      1083          move.l    D3,-(A7)
08000828  206E 0010 1084          move.l    16(A6),A0
0800082C  58AE 0010 1085          addq.l    #4,16(A6)
08000830  2F10      1086          move.l    (A0),-(A7)
08000832  4E94      1087          jsr       (A4)
08000834  DEFC 000C 1088          add.w     #12,A7
08000838  6016      1089          bra.s     doprint_43
                    1090   doprint_42:
0800083A  4878 0010 1091          pea       16
0800083E  2F03      1092          move.l    D3,-(A7)
08000840  206E 0010 1093          move.l    16(A6),A0
08000844  58AE 0010 1094          addq.l    #4,16(A6)
08000848  2F10      1095          move.l    (A0),-(A7)
0800084A  4E94      1096          jsr       (A4)
0800084C  DEFC 000C 1097          add.w     #12,A7
                    1098   doprint_43:
08000850  6000 0058 1099          bra       doprint_23
                    1100   doprint_30:
08000854  206E 0010 1101          move.l    16(A6),A0
08000858  58AE 0010 1102          addq.l    #4,16(A6)
0800085C  2010      1103          move.l    (A0),D0
0800085E  2042      1104          move.l    D2,A0
08000860  5282      1105          addq.l    #1,D2
08000862  1080      1106          move.b    D0,(A0)
08000864  2042      1107          move.l    D2,A0
08000866  4210      1108          clr.b     (A0)
08000868  200D      1109          move.l    A5,D0
0800086A  6704      1110          beq.s     doprint_44
0800086C  200D      1111          move.l    A5,D0
0800086E  6006      1112          bra.s     doprint_45
                    1113   doprint_44:
08000870  7001      1114          moveq     #1,D0
08000872  4880      1115          ext.w     D0
08000874  48C0      1116          ext.l     D0
                    1117   doprint_45:
08000876  2A00      1118          move.l    D0,D5
08000878  6000 0030 1119          bra       doprint_23
                    1120   doprint_31:
0800087C  206E 0010 1121          move.l    16(A6),A0
08000880  58AE 0010 1122          addq.l    #4,16(A6)
08000884  2610      1123          move.l    (A0),D3
08000886  0C85 FFFF 1124          cmp.l     #-1,D5
0800088A  FFFF      
0800088C  660C      1125          bne.s     doprint_46
0800088E  2F03      1126          move.l    D3,-(A7)
08000890  4EB9 0800 1127          jsr       _strlen
08000894  0DFA      
08000896  584F      1128          addq.w    #4,A7
08000898  2A00      1129          move.l    D0,D5
                    1130   doprint_46:
0800089A  600E      1131          bra.s     doprint_23
                    1132   doprint_22:
0800089C  206E 000C 1133          move.l    12(A6),A0
080008A0  2242      1134          move.l    D2,A1
080008A2  5282      1135          addq.l    #1,D2
080008A4  1290      1136          move.b    (A0),(A1)
080008A6  2042      1137          move.l    D2,A0
080008A8  4210      1138          clr.b     (A0)
                    1139   doprint_23:
080008AA  2F03      1140          move.l    D3,-(A7)
080008AC  4EB9 0800 1141          jsr       _strlen
080008B0  0DFA      
080008B2  584F      1142          addq.w    #4,A7
080008B4  1800      1143          move.b    D0,D4
080008B6  206E 000C 1144          move.l    12(A6),A0
080008BA  1010      1145          move.b    (A0),D0
080008BC  0C00 0073 1146          cmp.b     #115,D0
080008C0  661C      1147          bne.s     doprint_48
080008C2  0C85 0000 1148          cmp.l     #0,D5
080008C6  0000      
080008C8  6D14      1149          blt.s     doprint_48
080008CA  4884      1150          ext.w     D4
080008CC  48C4      1151          ext.l     D4
080008CE  B885      1152          cmp.l     D5,D4
080008D0  6F04      1153          ble.s     doprint_50
080008D2  2005      1154          move.l    D5,D0
080008D4  6006      1155          bra.s     doprint_51
                    1156   doprint_50:
080008D6  1004      1157          move.b    D4,D0
080008D8  4880      1158          ext.w     D0
080008DA  48C0      1159          ext.l     D0
                    1160   doprint_51:
080008DC  1800      1161          move.b    D0,D4
                    1162   doprint_48:
080008DE  206E 000C 1163          move.l    12(A6),A0
080008E2  1010      1164          move.b    (A0),D0
080008E4  0C00 0058 1165          cmp.b     #88,D0
080008E8  6600 0028 1166          bne       doprint_56
080008EC  41EE FFDC 1167          lea       -36(A6),A0
080008F0  2408      1168          move.l    A0,D2
                    1169   doprint_54:
080008F2  2042      1170          move.l    D2,A0
080008F4  4A10      1171          tst.b     (A0)
080008F6  671A      1172          beq.s     doprint_56
080008F8  2042      1173          move.l    D2,A0
080008FA  1210      1174          move.b    (A0),D1
080008FC  4881      1175          ext.w     D1
080008FE  48C1      1176          ext.l     D1
08000900  2F01      1177          move.l    D1,-(A7)
08000902  4EB9 0800 1178          jsr       _toupper
08000906  0E3C      
08000908  584F      1179          addq.w    #4,A7
0800090A  2042      1180          move.l    D2,A0
0800090C  1080      1181          move.b    D0,(A0)
0800090E  5282      1182          addq.l    #1,D2
08000910  60E0      1183          bra       doprint_54
                    1184   doprint_56:
08000912  7E00      1185          moveq     #0,D7
08000914  41EE FFD4 1186          lea       -44(A6),A0
08000918  2408      1187          move.l    A0,D2
0800091A  206E 000C 1188          move.l    12(A6),A0
0800091E  1010      1189          move.b    (A0),D0
08000920  0C00 0064 1190          cmp.b     #100,D0
08000924  670E      1191          beq.s     doprint_59
08000926  206E 000C 1192          move.l    12(A6),A0
0800092A  1010      1193          move.b    (A0),D0
0800092C  0C00 0069 1194          cmp.b     #105,D0
08000930  6600 0068 1195          bne       doprint_65
                    1196   doprint_59:
08000934  102E FFCE 1197          move.b    -50(A6),D0
08000938  4880      1198          ext.w     D0
0800093A  48C0      1199          ext.l     D0
0800093C  4A80      1200          tst.l     D0
0800093E  660C      1201          bne.s     doprint_62
08000940  2043      1202          move.l    D3,A0
08000942  1010      1203          move.b    (A0),D0
08000944  0C00 002D 1204          cmp.b     #45,D0
08000948  6600 0028 1205          bne       doprint_60
                    1206   doprint_62:
0800094C  2043      1207          move.l    D3,A0
0800094E  1010      1208          move.b    (A0),D0
08000950  0C00 002D 1209          cmp.b     #45,D0
08000954  660E      1210          bne.s     doprint_63
08000956  2043      1211          move.l    D3,A0
08000958  5283      1212          addq.l    #1,D3
0800095A  2242      1213          move.l    D2,A1
0800095C  5282      1214          addq.l    #1,D2
0800095E  1290      1215          move.b    (A0),(A1)
08000960  5304      1216          subq.b    #1,D4
08000962  6008      1217          bra.s     doprint_64
                    1218   doprint_63:
08000964  2042      1219          move.l    D2,A0
08000966  5282      1220          addq.l    #1,D2
08000968  10BC 002B 1221          move.b    #43,(A0)
                    1222   doprint_64:
0800096C  5287      1223          addq.l    #1,D7
0800096E  6000 002A 1224          bra       doprint_65
                    1225   doprint_60:
08000972  4A2E FFCF 1226          tst.b     -49(A6)
08000976  6722      1227          beq.s     doprint_65
08000978  2043      1228          move.l    D3,A0
0800097A  1010      1229          move.b    (A0),D0
0800097C  0C00 002D 1230          cmp.b     #45,D0
08000980  660E      1231          bne.s     doprint_67
08000982  2043      1232          move.l    D3,A0
08000984  5283      1233          addq.l    #1,D3
08000986  2242      1234          move.l    D2,A1
08000988  5282      1235          addq.l    #1,D2
0800098A  1290      1236          move.b    (A0),(A1)
0800098C  5304      1237          subq.b    #1,D4
0800098E  6008      1238          bra.s     doprint_68
                    1239   doprint_67:
08000990  2042      1240          move.l    D2,A0
08000992  5282      1241          addq.l    #1,D2
08000994  10BC 0020 1242          move.b    #32,(A0)
                    1243   doprint_68:
08000998  5287      1244          addq.l    #1,D7
                    1245   doprint_65:
0800099A  4A2E FFD0 1246          tst.b     -48(A6)
0800099E  6700 005A 1247          beq       doprint_77
080009A2  206E 000C 1248          move.l    12(A6),A0
080009A6  1010      1249          move.b    (A0),D0
080009A8  4880      1250          ext.w     D0
080009AA  48C0      1251          ext.l     D0
080009AC  0C80 0000 1252          cmp.l     #111,D0
080009B0  006F      
080009B2  671A      1253          beq.s     doprint_73
080009B4  6E0C      1254          bgt.s     doprint_76
080009B6  0C80 0000 1255          cmp.l     #88,D0
080009BA  0058      
080009BC  6710      1256          beq.s     doprint_73
080009BE  6000 003A 1257          bra       doprint_77
                    1258   doprint_76:
080009C2  0C80 0000 1259          cmp.l     #120,D0
080009C6  0078      
080009C8  6704      1260          beq.s     doprint_73
080009CA  6000 002E 1261          bra       doprint_77
                    1262   doprint_73:
080009CE  2042      1263          move.l    D2,A0
080009D0  5282      1264          addq.l    #1,D2
080009D2  10BC 0030 1265          move.b    #48,(A0)
080009D6  5287      1266          addq.l    #1,D7
080009D8  206E 000C 1267          move.l    12(A6),A0
080009DC  1010      1268          move.b    (A0),D0
080009DE  0C00 0078 1269          cmp.b     #120,D0
080009E2  670C      1270          beq.s     doprint_79
080009E4  206E 000C 1271          move.l    12(A6),A0
080009E8  1010      1272          move.b    (A0),D0
080009EA  0C00 0058 1273          cmp.b     #88,D0
080009EE  660A      1274          bne.s     doprint_77
                    1275   doprint_79:
080009F0  2042      1276          move.l    D2,A0
080009F2  5282      1277          addq.l    #1,D2
080009F4  10BC 0078 1278          move.b    #120,(A0)
080009F8  5287      1279          addq.l    #1,D7
                    1280   doprint_77:
080009FA  2042      1281          move.l    D2,A0
080009FC  4210      1282          clr.b     (A0)
080009FE  206E 000C 1283          move.l    12(A6),A0
08000A02  1010      1284          move.b    (A0),D0
08000A04  4880      1285          ext.w     D0
08000A06  48C0      1286          ext.l     D0
08000A08  0C80 0000 1287          cmp.l     #105,D0
08000A0C  0069      
08000A0E  6700 0076 1288          beq       doprint_82
08000A12  6E42      1289          bgt.s     doprint_93
08000A14  0C80 0000 1290          cmp.l     #99,D0
08000A18  0063      
08000A1A  6700 0084 1291          beq       doprint_96
08000A1E  6E1C      1292          bgt.s     doprint_94
08000A20  0C80 0000 1293          cmp.l     #88,D0
08000A24  0058      
08000A26  6700 005E 1294          beq       doprint_82
08000A2A  6E00 0184 1295          bgt       doprint_80
08000A2E  0C80 0000 1296          cmp.l     #69,D0
08000A32  0045      
08000A34  6700 0050 1297          beq       doprint_82
08000A38  6000 0176 1298          bra       doprint_80
                    1299   doprint_94:
08000A3C  0C80 0000 1300          cmp.l     #101,D0
08000A40  0065      
08000A42  6700 0042 1301          beq       doprint_82
08000A46  6E00 0168 1302          bgt       doprint_80
08000A4A  0C80 0000 1303          cmp.l     #100,D0
08000A4E  0064      
08000A50  6734      1304          beq.s     doprint_82
08000A52  6000 015C 1305          bra       doprint_80
                    1306   doprint_93:
08000A56  0C80 0000 1307          cmp.l     #117,D0
08000A5A  0075      
08000A5C  6728      1308          beq.s     doprint_82
08000A5E  6E1A      1309          bgt.s     doprint_95
08000A60  0C80 0000 1310          cmp.l     #115,D0
08000A64  0073      
08000A66  6700 0038 1311          beq       doprint_96
08000A6A  6E00 0144 1312          bgt       doprint_80
08000A6E  0C80 0000 1313          cmp.l     #111,D0
08000A72  006F      
08000A74  6710      1314          beq.s     doprint_82
08000A76  6000 0138 1315          bra       doprint_80
                    1316   doprint_95:
08000A7A  0C80 0000 1317          cmp.l     #120,D0
08000A7E  0078      
08000A80  6704      1318          beq.s     doprint_82
08000A82  6000 012C 1319          bra       doprint_80
                    1320   doprint_82:
08000A86  4A2E FFD2 1321          tst.b     -46(A6)
08000A8A  6714      1322          beq.s     doprint_96
08000A8C  4A2E FFCD 1323          tst.b     -51(A6)
08000A90  660E      1324          bne.s     doprint_96
08000A92  200D      1325          move.l    A5,D0
08000A94  9087      1326          sub.l     D7,D0
08000A96  4884      1327          ext.w     D4
08000A98  48C4      1328          ext.l     D4
08000A9A  9084      1329          sub.l     D4,D0
08000A9C  2D40 FFFC 1330          move.l    D0,-4(A6)
                    1331   doprint_96:
08000AA0  202E FFFC 1332          move.l    -4(A6),D0
08000AA4  0C80 0000 1333          cmp.l     #0,D0
08000AA8  0000      
08000AAA  6C04      1334          bge.s     doprint_98
08000AAC  42AE FFFC 1335          clr.l     -4(A6)
                    1336   doprint_98:
08000AB0  4A2E FFCD 1337          tst.b     -51(A6)
08000AB4  6600 0030 1338          bne       doprint_104
08000AB8  1004      1339          move.b    D4,D0
08000ABA  4880      1340          ext.w     D0
08000ABC  48C0      1341          ext.l     D0
08000ABE  D0AE FFFC 1342          add.l     -4(A6),D0
08000AC2  D087      1343          add.l     D7,D0
08000AC4  1D40 FFD1 1344          move.b    D0,-47(A6)
                    1345   doprint_102:
08000AC8  102E FFD1 1346          move.b    -47(A6),D0
08000ACC  4880      1347          ext.w     D0
08000ACE  48C0      1348          ext.l     D0
08000AD0  220D      1349          move.l    A5,D1
08000AD2  534D      1350          subq.w    #1,A5
08000AD4  B081      1351          cmp.l     D1,D0
08000AD6  6C0E      1352          bge.s     doprint_104
08000AD8  4878 0020 1353          pea       32
08000ADC  2F0A      1354          move.l    A2,-(A7)
08000ADE  4E93      1355          jsr       (A3)
08000AE0  504F      1356          addq.w    #8,A7
08000AE2  5286      1357          addq.l    #1,D6
08000AE4  60E2      1358          bra       doprint_102
                    1359   doprint_104:
08000AE6  41EE FFD4 1360          lea       -44(A6),A0
08000AEA  2408      1361          move.l    A0,D2
                    1362   doprint_105:
08000AEC  2042      1363          move.l    D2,A0
08000AEE  4A10      1364          tst.b     (A0)
08000AF0  6716      1365          beq.s     doprint_107
08000AF2  2042      1366          move.l    D2,A0
08000AF4  5282      1367          addq.l    #1,D2
08000AF6  1210      1368          move.b    (A0),D1
08000AF8  4881      1369          ext.w     D1
08000AFA  48C1      1370          ext.l     D1
08000AFC  2F01      1371          move.l    D1,-(A7)
08000AFE  2F0A      1372          move.l    A2,-(A7)
08000B00  4E93      1373          jsr       (A3)
08000B02  504F      1374          addq.w    #8,A7
08000B04  5286      1375          addq.l    #1,D6
08000B06  60E4      1376          bra       doprint_105
                    1377   doprint_107:
08000B08  202E FFFC 1378          move.l    -4(A6),D0
08000B0C  1D40 FFD1 1379          move.b    D0,-47(A6)
                    1380   doprint_108:
08000B10  102E FFD1 1381          move.b    -47(A6),D0
08000B14  532E FFD1 1382          subq.b    #1,-47(A6)
08000B18  4A00      1383          tst.b     D0
08000B1A  670E      1384          beq.s     doprint_110
08000B1C  4878 0030 1385          pea       48
08000B20  2F0A      1386          move.l    A2,-(A7)
08000B22  4E93      1387          jsr       (A3)
08000B24  504F      1388          addq.w    #8,A7
08000B26  5286      1389          addq.l    #1,D6
08000B28  60E6      1390          bra       doprint_108
                    1391   doprint_110:
08000B2A  2043      1392          move.l    D3,A0
08000B2C  4A10      1393          tst.b     (A0)
08000B2E  6700 0048 1394          beq       doprint_113
08000B32  206E 000C 1395          move.l    12(A6),A0
08000B36  1010      1396          move.b    (A0),D0
08000B38  4880      1397          ext.w     D0
08000B3A  48C0      1398          ext.l     D0
08000B3C  0C80 0000 1399          cmp.l     #115,D0
08000B40  0073      
08000B42  670C      1400          beq.s     doprint_116
08000B44  6E18      1401          bgt.s     doprint_119
08000B46  0C80 0000 1402          cmp.l     #99,D0
08000B4A  0063      
08000B4C  6702      1403          beq.s     doprint_116
08000B4E  600E      1404          bra.s     doprint_119
                    1405   doprint_116:
08000B50  2005      1406          move.l    D5,D0
08000B52  5385      1407          subq.l    #1,D5
08000B54  0C80 0000 1408          cmp.l     #0,D0
08000B58  0000      
08000B5A  6E02      1409          bgt.s     doprint_119
08000B5C  6016      1410          bra.s     doprint_115
                    1411   doprint_119:
08000B5E  2043      1412          move.l    D3,A0
08000B60  5283      1413          addq.l    #1,D3
08000B62  1210      1414          move.b    (A0),D1
08000B64  4881      1415          ext.w     D1
08000B66  48C1      1416          ext.l     D1
08000B68  2F01      1417          move.l    D1,-(A7)
08000B6A  2F0A      1418          move.l    A2,-(A7)
08000B6C  4E93      1419          jsr       (A3)
08000B6E  504F      1420          addq.w    #8,A7
08000B70  5286      1421          addq.l    #1,D6
08000B72  6002      1422          bra.s     doprint_112
                    1423   doprint_115:
08000B74  6002      1424          bra.s     doprint_113
                    1425   doprint_112:
08000B76  60B2      1426          bra       doprint_110
                    1427   doprint_113:
08000B78  4A2E FFCD 1428          tst.b     -51(A6)
08000B7C  6700 0030 1429          beq       doprint_125
08000B80  1004      1430          move.b    D4,D0
08000B82  4880      1431          ext.w     D0
08000B84  48C0      1432          ext.l     D0
08000B86  D0AE FFFC 1433          add.l     -4(A6),D0
08000B8A  D087      1434          add.l     D7,D0
08000B8C  1D40 FFD1 1435          move.b    D0,-47(A6)
                    1436   doprint_123:
08000B90  102E FFD1 1437          move.b    -47(A6),D0
08000B94  4880      1438          ext.w     D0
08000B96  48C0      1439          ext.l     D0
08000B98  220D      1440          move.l    A5,D1
08000B9A  534D      1441          subq.w    #1,A5
08000B9C  B081      1442          cmp.l     D1,D0
08000B9E  6C0E      1443          bge.s     doprint_125
08000BA0  4878 0020 1444          pea       32
08000BA4  2F0A      1445          move.l    A2,-(A7)
08000BA6  4E93      1446          jsr       (A3)
08000BA8  504F      1447          addq.w    #8,A7
08000BAA  5386      1448          subq.l    #1,D6
08000BAC  60E2      1449          bra       doprint_123
                    1450   doprint_125:
08000BAE  6014      1451          bra.s     doprint_81
                    1452   doprint_80:
08000BB0  206E 000C 1453          move.l    12(A6),A0
08000BB4  1210      1454          move.b    (A0),D1
08000BB6  4881      1455          ext.w     D1
08000BB8  48C1      1456          ext.l     D1
08000BBA  2F01      1457          move.l    D1,-(A7)
08000BBC  2F0A      1458          move.l    A2,-(A7)
08000BBE  4E93      1459          jsr       (A3)
08000BC0  504F      1460          addq.w    #8,A7
08000BC2  5286      1461          addq.l    #1,D6
                    1462   doprint_81:
08000BC4  52AE 000C 1463          addq.l    #1,12(A6)
                    1464   doprint_2:
08000BC8  6000 FA0A 1465          bra       doprint_1
                    1466   doprint_3:
08000BCC  4A92      1467          tst.l     (A2)
08000BCE  6710      1468          beq.s     doprint_126
08000BD0  4201      1469          clr.b     D1
08000BD2  C2BC 0000 1470          and.l     #255,D1
08000BD6  00FF      
08000BD8  2F01      1471          move.l    D1,-(A7)
08000BDA  2F0A      1472          move.l    A2,-(A7)
08000BDC  4E93      1473          jsr       (A3)
08000BDE  504F      1474          addq.w    #8,A7
                    1475   doprint_126:
08000BE0  2006      1476          move.l    D6,D0
08000BE2  4CDF 3CFC 1477          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
08000BE6  4E5E      1478          unlk      A6
08000BE8  4E75      1479          rts
                    1480   @itoa_convert:
08000BEA  4E56 0000 1481          link      A6,#0
08000BEE  48E7 3C00 1482          movem.l   D2/D3/D4/D5,-(A7)
08000BF2  242E 0008 1483          move.l    8(A6),D2
08000BF6  262E 0010 1484          move.l    16(A6),D3
08000BFA  2A2E 000C 1485          move.l    12(A6),D5
08000BFE  2F05      1486          move.l    D5,-(A7)
08000C00  2F03      1487          move.l    D3,-(A7)
08000C02  4EB9 0800 1488          jsr       ULDIV
08000C06  0E68      
08000C08  202F 0004 1489          move.l    4(A7),D0
08000C0C  504F      1490          addq.w    #8,A7
08000C0E  2800      1491          move.l    D0,D4
08000C10  BA83      1492          cmp.l     D3,D5
08000C12  6520      1493          blo.s     @itoa_convert_1
08000C14  2F03      1494          move.l    D3,-(A7)
08000C16  2F05      1495          move.l    D5,-(A7)
08000C18  2F03      1496          move.l    D3,-(A7)
08000C1A  4EB9 0800 1497          jsr       ULDIV
08000C1E  0E68      
08000C20  2217      1498          move.l    (A7),D1
08000C22  504F      1499          addq.w    #8,A7
08000C24  2F01      1500          move.l    D1,-(A7)
08000C26  2F02      1501          move.l    D2,-(A7)
08000C28  4EB9 0800 1502          jsr       @itoa_convert
08000C2C  0BEA      
08000C2E  DEFC 000C 1503          add.w     #12,A7
08000C32  2400      1504          move.l    D0,D2
                    1505   @itoa_convert_1:
08000C34  0C84 0000 1506          cmp.l     #9,D4
08000C38  0009      
08000C3A  6E0E      1507          bgt.s     @itoa_convert_3
08000C3C  2004      1508          move.l    D4,D0
08000C3E  7230      1509          moveq     #48,D1
08000C40  C2BC 0000 1510          and.l     #255,D1
08000C44  00FF      
08000C46  D081      1511          add.l     D1,D0
08000C48  6012      1512          bra.s     @itoa_convert_4
                    1513   @itoa_convert_3:
08000C4A  2004      1514          move.l    D4,D0
08000C4C  7261      1515          moveq     #97,D1
08000C4E  C2BC 0000 1516          and.l     #255,D1
08000C52  00FF      
08000C54  D081      1517          add.l     D1,D0
08000C56  0480 0000 1518          sub.l     #10,D0
08000C5A  000A      
                    1519   @itoa_convert_4:
08000C5C  2042      1520          move.l    D2,A0
08000C5E  1080      1521          move.b    D0,(A0)
08000C60  2002      1522          move.l    D2,D0
08000C62  5280      1523          addq.l    #1,D0
08000C64  4CDF 003C 1524          movem.l   (A7)+,D2/D3/D4/D5
08000C68  4E5E      1525          unlk      A6
08000C6A  4E75      1526          rts
                    1527   _ltoa:
08000C6C  4E56 0000 1528          link      A6,#0
08000C70  48E7 3C00 1529          movem.l   D2/D3/D4/D5,-(A7)
08000C74  242E 0008 1530          move.l    8(A6),D2
08000C78  262E 000C 1531          move.l    12(A6),D3
08000C7C  2A2E 0010 1532          move.l    16(A6),D5
08000C80  2803      1533          move.l    D3,D4
08000C82  0C85 0000 1534          cmp.l     #2,D5
08000C86  0002      
08000C88  6D08      1535          blt.s     ltoa_3
08000C8A  0C85 0000 1536          cmp.l     #36,D5
08000C8E  0024      
08000C90  6F06      1537          ble.s     ltoa_1
                    1538   ltoa_3:
08000C92  2003      1539          move.l    D3,D0
08000C94  6000 0056 1540          bra       ltoa_4
                    1541   ltoa_1:
08000C98  0C85 0000 1542          cmp.l     #10,D5
08000C9C  000A      
08000C9E  6600 0034 1543          bne       ltoa_5
08000CA2  0C82 0000 1544          cmp.l     #0,D2
08000CA6  0000      
08000CA8  6C2A      1545          bge.s     ltoa_5
08000CAA  2002      1546          move.l    D2,D0
08000CAC  4480      1547          neg.l     D0
08000CAE  2400      1548          move.l    D0,D2
08000CB0  0C82 0000 1549          cmp.l     #0,D2
08000CB4  0000      
08000CB6  6C14      1550          bge.s     ltoa_7
08000CB8  4879 0800 1551          pea       @itoa_1.L
08000CBC  0FCC      
08000CBE  2F03      1552          move.l    D3,-(A7)
08000CC0  4EB9 0800 1553          jsr       _strcpy
08000CC4  0E58      
08000CC6  504F      1554          addq.w    #8,A7
08000CC8  2003      1555          move.l    D3,D0
08000CCA  6020      1556          bra.s     ltoa_4
                    1557   ltoa_7:
08000CCC  2044      1558          move.l    D4,A0
08000CCE  5284      1559          addq.l    #1,D4
08000CD0  10BC 002D 1560          move.b    #45,(A0)
                    1561   ltoa_5:
08000CD4  2F05      1562          move.l    D5,-(A7)
08000CD6  2F02      1563          move.l    D2,-(A7)
08000CD8  2F04      1564          move.l    D4,-(A7)
08000CDA  4EB9 0800 1565          jsr       @itoa_convert
08000CDE  0BEA      
08000CE0  DEFC 000C 1566          add.w     #12,A7
08000CE4  2800      1567          move.l    D0,D4
08000CE6  2044      1568          move.l    D4,A0
08000CE8  4210      1569          clr.b     (A0)
08000CEA  2003      1570          move.l    D3,D0
                    1571   ltoa_4:
08000CEC  4CDF 003C 1572          movem.l   (A7)+,D2/D3/D4/D5
08000CF0  4E5E      1573          unlk      A6
08000CF2  4E75      1574          rts
                    1575   _ultoa:
08000CF4  4E56 0000 1576          link      A6,#0
08000CF8  48E7 3800 1577          movem.l   D2/D3/D4,-(A7)
08000CFC  262E 0010 1578          move.l    16(A6),D3
08000D00  282E 000C 1579          move.l    12(A6),D4
08000D04  2404      1580          move.l    D4,D2
08000D06  0C83 0000 1581          cmp.l     #2,D3
08000D0A  0002      
08000D0C  6D08      1582          blt.s     ultoa_3
08000D0E  0C83 0000 1583          cmp.l     #36,D3
08000D12  0024      
08000D14  6F04      1584          ble.s     ultoa_1
                    1585   ultoa_3:
08000D16  2004      1586          move.l    D4,D0
08000D18  601A      1587          bra.s     ultoa_4
                    1588   ultoa_1:
08000D1A  2F03      1589          move.l    D3,-(A7)
08000D1C  2F2E 0008 1590          move.l    8(A6),-(A7)
08000D20  2F02      1591          move.l    D2,-(A7)
08000D22  4EB9 0800 1592          jsr       @itoa_convert
08000D26  0BEA      
08000D28  DEFC 000C 1593          add.w     #12,A7
08000D2C  2400      1594          move.l    D0,D2
08000D2E  2042      1595          move.l    D2,A0
08000D30  4210      1596          clr.b     (A0)
08000D32  2004      1597          move.l    D4,D0
                    1598   ultoa_4:
08000D34  4CDF 001C 1599          movem.l   (A7)+,D2/D3/D4
08000D38  4E5E      1600          unlk      A6
08000D3A  4E75      1601          rts
                    1602   _itoa:
08000D3C  4E56 0000 1603          link      A6,#0
08000D40  2F2E 0010 1604          move.l    16(A6),-(A7)
08000D44  2F2E 000C 1605          move.l    12(A6),-(A7)
08000D48  2F2E 0008 1606          move.l    8(A6),-(A7)
08000D4C  4EB9 0800 1607          jsr       _ltoa
08000D50  0C6C      
08000D52  DEFC 000C 1608          add.w     #12,A7
08000D56  4E5E      1609          unlk      A6
08000D58  4E75      1610          rts
                    1611   ULMUL:
08000D5A  4E56 0000 1612          link    A6,#0
08000D5E  48E7 C000 1613          movem.l D0/D1,-(A7)
08000D62  222E 0008 1614          move.l  8(A6),D1
08000D66  202E 000C 1615          move.l  12(A6),D0
08000D6A  602C      1616          bra.s   lmul_3
                    1617   LMUL:
08000D6C  4E56 0000 1618          link    A6,#0
08000D70  48E7 C000 1619          movem.l D0/D1,-(A7)
08000D74  222E 0008 1620          move.l  8(A6),D1
08000D78  202E 000C 1621          move.l  12(A6),D0
08000D7C  4A80      1622          tst.l   D0
08000D7E  6A0A      1623          bpl.s   lmul_1
08000D80  4480      1624          neg.l   D0
08000D82  4A81      1625          tst.l   D1
08000D84  6A0A      1626          bpl.s   lmul_2
08000D86  4481      1627          neg.l   D1
08000D88  600E      1628          bra.s   lmul_3
                    1629   lmul_1:
08000D8A  4A81      1630          tst.l   D1
08000D8C  6A0A      1631          bpl.s   lmul_3
08000D8E  4481      1632          neg.l   D1
                    1633   lmul_2:
08000D90  6114      1634          bsr.s   domul
08000D92  4481      1635          neg.l   D1
08000D94  4080      1636          negx.l  D0
08000D96  6002      1637          bra.s   lmul_4
                    1638   lmul_3:
08000D98  610C      1639          bsr.s   domul
                    1640   lmul_4:
08000D9A  2D41 0008 1641          move.l  D1,8(A6)
08000D9E  4CDF 0003 1642          movem.l (A7)+,D0/D1
08000DA2  4E5E      1643          unlk    A6
08000DA4  4E75      1644          rts
                    1645   domul:
08000DA6  0C81 0000 1646          cmpi.l  #$FFFF,D1
08000DAA  FFFF      
08000DAC  620C      1647          bhi.s   domul_1
08000DAE  0C80 0000 1648          cmpi.l  #$FFFF,D0
08000DB2  FFFF      
08000DB4  620E      1649          bhi.s   domul_2
08000DB6  C2C0      1650          mulu    D0,D1
08000DB8  4E75      1651          rts
                    1652   domul_1:
08000DBA  0C80 0000 1653          cmpi.l  #$FFFF,D0
08000DBE  FFFF      
08000DC0  6218      1654          bhi.s   domul_4
08000DC2  6002      1655          bra.s   domul_3
                    1656   domul_2
08000DC4  C141      1657          exg     D0,D1
                    1658   domul_3:
08000DC6  2F02      1659          move.l  D2,-(A7)
08000DC8  2401      1660          move.l  D1,D2
08000DCA  4842      1661          swap    D2
08000DCC  C2C0      1662          mulu    D0,D1
08000DCE  C4C0      1663          mulu    D0,D2
08000DD0  4842      1664          swap    D2
08000DD2  4242      1665          clr.w   D2
08000DD4  D282      1666          add.l   D2,D1
08000DD6  241F      1667          move.l  (A7)+,D2
08000DD8  4E75      1668          rts
                    1669   domul_4:
08000DDA  48E7 3000 1670          movem.l D2/D3,-(A7)
08000DDE  2401      1671          move.l  D1,D2
08000DE0  2601      1672          move.l  D1,D3
08000DE2  C2C0      1673          mulu    D0,D1
08000DE4  4842      1674          swap    D2
08000DE6  C4C0      1675          mulu    D0,D2
08000DE8  4840      1676          swap    D0
08000DEA  C6C0      1677          mulu    D0,D3
08000DEC  D483      1678          add.l   D3,D2
08000DEE  4842      1679          swap    D2
08000DF0  4242      1680          clr.w   D2
08000DF2  D282      1681          add.l   D2,D1
08000DF4  4CDF 000C 1682          movem.l (A7)+,D2/D3
08000DF8  4E75      1683          rts
                    1684   _strlen:
08000DFA  206F 0004 1685          move.l    (4,A7),A0
08000DFE  2248      1686          move.l    A0,A1
                    1687   strlen_1:
08000E00  4A19      1688          tst.b     (A1)+
08000E02  66FC      1689          bne       strlen_1
08000E04  2009      1690          move.l    A1,D0
08000E06  9088      1691          sub.l     A0,D0
08000E08  5380      1692          subq.l    #1,D0
08000E0A  4E75      1693          rts
                    1694   _putch:
08000E0C  4E56 0000 1695          link      A6,#0
08000E10  2F02      1696          move.l    D2,-(A7)
08000E12  242E 0008 1697          move.l    8(A6),D2
08000E16  0C82 0000 1698          cmp.l     #10,D2
08000E1A  000A      
08000E1C  660C      1699          bne.s     putch_1
08000E1E  4878 000D 1700          pea       13
08000E22  4EB9 0800 1701          jsr       __putch
08000E26  0050      
08000E28  584F      1702          addq.w    #4,A7
                    1703   putch_1:
08000E2A  2F02      1704          move.l    D2,-(A7)
08000E2C  4EB9 0800 1705          jsr       __putch
08000E30  0050      
08000E32  584F      1706          addq.w    #4,A7
08000E34  2002      1707          move.l    D2,D0
08000E36  241F      1708          move.l    (A7)+,D2
08000E38  4E5E      1709          unlk      A6
08000E3A  4E75      1710          rts
                    1711   _toupper:
08000E3C  202F 0004 1712          move.l    4(A7),D0
08000E40  0C80 0000 1713          cmp.l     #'a',D0
08000E44  0061      
08000E46  6D0E      1714          blt.s     toupper_1
08000E48  0C80 0000 1715          cmp.l     #'z',D0
08000E4C  007A      
08000E4E  6E06      1716          bgt.s     toupper_1
08000E50  0480 0000 1717          sub.l     #$20,D0
08000E54  0020      
                    1718   toupper_1:
08000E56  4E75      1719          rts
                    1720   _strcpy:
08000E58  206F 0004 1721          move.l    (4,A7),A0
08000E5C  226F 0008 1722          move.l    (8,A7),A1
08000E60  2008      1723          move.l    A0,D0
                    1724   strcpy_1:
08000E62  10D9      1725          move.b    (A1)+,(A0)+
08000E64  66FC      1726          bne.s     strcpy_1
08000E66  4E75      1727          rts
                    1728   ULDIV:
08000E68  4E56 0000 1729          link    A6,#0
08000E6C  48E7 C000 1730          movem.l D0/D1,-(A7)
08000E70  222E 0008 1731          move.l  8(A6),D1
08000E74  202E 000C 1732          move.l  12(A6),D0
08000E78  6036      1733          bra.s   ldiv_3
                    1734   LDIV:
08000E7A  4E56 0000 1735          link    A6,#0
08000E7E  48E7 C000 1736          movem.l D0/D1,-(A7)
08000E82  222E 0008 1737          move.l  8(A6),D1
08000E86  202E 000C 1738          move.l  12(A6),D0
08000E8A  4A80      1739          tst.l   D0
08000E8C  6A0E      1740          bpl.s   ldiv_1
08000E8E  4480      1741          neg.l   D0
08000E90  4A81      1742          tst.l   D1
08000E92  6A14      1743          bpl.s   ldiv_2
08000E94  4481      1744          neg.l   D1
08000E96  612A      1745          bsr.s   dodiv
08000E98  4481      1746          neg.l   D1
08000E9A  6016      1747          bra.s   ldiv_4
                    1748   ldiv_1:
08000E9C  4A81      1749          tst.l   D1
08000E9E  6A10      1750          bpl.s   ldiv_3
08000EA0  4481      1751          neg.l   D1
08000EA2  611E      1752          bsr.s   dodiv
08000EA4  4480      1753          neg.l   D0
08000EA6  600A      1754          bra.s   ldiv_4
                    1755   ldiv_2:
08000EA8  6118      1756          bsr.s   dodiv
08000EAA  4480      1757          neg.l   D0
08000EAC  4481      1758          neg.l   D1
08000EAE  6002      1759          bra.s   ldiv_4
                    1760   ldiv_3:
08000EB0  6110      1761          bsr.s   dodiv
                    1762   ldiv_4:
08000EB2  2D40 0008 1763          move.l  D0,8(A6)
08000EB6  2D41 000C 1764          move.l  D1,12(A6)
08000EBA  4CDF 0003 1765          movem.l (A7)+,D0/D1
08000EBE  4E5E      1766          unlk    A6
08000EC0  4E75      1767          rts
                    1768   dodiv:
08000EC2  0C81 0000 1769          cmpi.l  #$FFFF,D1
08000EC6  FFFF      
08000EC8  6236      1770          bhi.s   dodiv_2
08000ECA  0C80 0000 1771          cmpi.l  #$FFFF,D0
08000ECE  FFFF      
08000ED0  6210      1772          bhi.s   dodiv_1
08000ED2  80C1      1773          divu    D1,D0
08000ED4  2200      1774          move.l  D0,D1
08000ED6  4241      1775          clr.w   D1
08000ED8  4841      1776          swap    D1
08000EDA  0280 0000 1777          andi.l  #$FFFF,D0
08000EDE  FFFF      
08000EE0  4E75      1778          rts
                    1779   dodiv_1:
08000EE2  48A7 A000 1780          movem.w D0/D2,-(A7)
08000EE6  4240      1781          clr.w   D0
08000EE8  4840      1782          swap    D0
08000EEA  80C1      1783          divu    D1,D0
08000EEC  3400      1784          move.w  D0,D2
08000EEE  301F      1785          move.w  (A7)+,D0
08000EF0  80C1      1786          divu    D1,D0
08000EF2  4840      1787          swap    D0
08000EF4  4281      1788          clr.l   D1
08000EF6  3200      1789          move.w  D0,D1
08000EF8  3002      1790          move.w  D2,D0
08000EFA  4840      1791          swap    D0
08000EFC  341F      1792          move.w  (A7)+,D2
08000EFE  4E75      1793          rts
                    1794   dodiv_2:
08000F00  48E7 3800 1795          movem.l D2/D3/D4,-(A7)
08000F04  2401      1796          move.l  D1,D2
08000F06  4242      1797          clr.w   D2
08000F08  4842      1798          swap    D2
08000F0A  5282      1799          addq.l  #1,D2
08000F0C  2600      1800          move.l  D0,D3
08000F0E  2801      1801          move.l  D1,D4
08000F10  2202      1802          move.l  D2,D1
08000F12  61CE      1803          bsr.s   dodiv_1
08000F14  2204      1804          move.l  D4,D1
08000F16  82C2      1805          divu    D2,D1
08000F18  80C1      1806          divu    D1,D0
08000F1A  0280 0000 1807          andi.l  #$FFFF,D0
08000F1E  FFFF      
                    1808   dodiv_3:
08000F20  2204      1809          move.l  D4,D1
08000F22  2404      1810          move.l  D4,D2
08000F24  4842      1811          swap    D2
08000F26  C2C0      1812          mulu    D0,D1
08000F28  C4C0      1813          mulu    D0,D2
08000F2A  4842      1814          swap    D2
08000F2C  D282      1815          add.l   D2,D1
08000F2E  9283      1816          sub.l   D3,D1
08000F30  620A      1817          bhi.s   dodiv_4
08000F32  4481      1818          neg.l   D1
08000F34  B881      1819          cmp.l   D1,D4
08000F36  6208      1820          bhi.s   dodiv_5
08000F38  5280      1821          addq.l  #1,D0
08000F3A  60E4      1822          bra.s   dodiv_3
                    1823   dodiv_4:
08000F3C  5380      1824          subq.l  #1,D0
08000F3E  60E0      1825          bra.s   dodiv_3
                    1826   dodiv_5:
08000F40  4CDF 001C 1827          movem.l (A7)+,D2/D3/D4
08000F44  4E75      1828          rts
                    1829          section   const
08000F46            1830                   align
                    1831   
                    1832   
                    1833   @canbus~2_1:
08000F46  4361 6E30 1834          dc.b      67,97,110,48,82,86,32,58,32,37,99,32,37,99,32
08000F4A  5256 203A 
08000F4E  2025 6320 
08000F52  2563 20   
08000F55  2563 2025 1835          dc.b      37,99,32,37,99,32,37,99,32,37,99,10,0
08000F59  6320 2563 
08000F5D  2025 630A 
08000F61  00        
                    1836   @canbus~2_2:
08000F62  4361 6E31 1837          dc.b      67,97,110,49,82,86,32,58,32,37,99,32,37,99,32
08000F66  5256 203A 
08000F6A  2025 6320 
08000F6E  2563 20   
08000F71  2563 2025 1838          dc.b      37,99,32,37,99,32,37,99,32,37,99,10,0
08000F75  6320 2563 
08000F79  2025 630A 
08000F7D  00        
                    1839   @canbus~2_3:
08000F7E  0D0A 0D0A 1840          dc.b      13,10,13,10,45,45,45,45,32,67,65,78,66,85,83
08000F82  2D2D 2D2D 
08000F86  2043 414E 
08000F8A  4255 53   
08000F8D  2054 6573 1841          dc.b      32,84,101,115,116,32,45,45,45,45,13,10,0
08000F91  7420 2D2D 
08000F95  2D2D 0D0A 
08000F99  00        
                    1842   @canbus~2_4:
08000F9A  7069 6E67 1843          dc.b      112,105,110,103,10,0
08000F9E  0A00      
                    1844   @canbus~2_5:
08000FA0  7472 616E 1845          dc.b      116,114,97,110,115,10,0
08000FA4  730A 00   
                    1846   @canbus~2_6:
08000FA8  0D0A 00   1847          dc.b      13,10,0
                    1848   @canbus~2_7:
08000FAC  706F 6E67 1849          dc.b      112,111,110,103,10,0
08000FB0  0A00      
                    1850   @canbus~2_8:
08000FB2  0A0A 5374 1851          dc.b      10,10,83,116,97,114,116,46,46,46,46,46,0
08000FB6  6172 742E 
08000FBA  2E2E 2E2E 
08000FBE  00        
                    1852   @canbus~2_9:
08000FC0  0A0A 446F 1853          dc.b      10,10,68,111,110,101,46,46,46,46,46,0
08000FC4  6E65 2E2E 
08000FC8  2E2E 2E00 
                    1854   @itoa_1:
08000FCC  2D32 3134 1855          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
08000FD0  3734 3833 
08000FD4  3634 3800 
                    1856   __ctype:
08000FD8  0040 4040 1857          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
08000FDC  4040 4040 
08000FE0  4040 5050 
08000FE4  5050 50   
08000FE7  4040 4040 1858          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
08000FEB  4040 4040 
08000FEF  4040 4040 
08000FF3  4040 40   
08000FF6  4040 40D0 1859          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
08000FFA  A0A0 A0A0 
08000FFE  A0A0 A0A0 
08001002  A0A0 A0A0 1860          dc.b      160,160,160,160,160,160,160,140,140,140,140
08001006  A0A0 A08C 
0800100A  8C8C 8C   
0800100D  8C8C 8C8C 1861          dc.b      140,140,140,140,140,140,160,160,160,160,160
08001011  8C8C A0A0 
08001015  A0A0 A0   
08001018  A0A0 8A8A 1862          dc.b      160,160,138,138,138,138,138,138,130,130,130
0800101C  8A8A 8A8A 
08001020  8282 82   
08001023  8282 8282 1863          dc.b      130,130,130,130,130,130,130,130,130,130,130
08001027  8282 8282 
0800102B  8282 82   
0800102E  8282 8282 1864          dc.b      130,130,130,130,130,130,160,160,160,160,160
08001032  8282 A0A0 
08001036  A0A0 A0   
08001039  A089 8989 1865          dc.b      160,137,137,137,137,137,137,129,129,129,129
0800103D  8989 8981 
08001041  8181 81   
08001044  8181 8181 1866          dc.b      129,129,129,129,129,129,129,129,129,129,129
08001048  8181 8181 
0800104C  8181 81   
0800104F  8181 8181 1867          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
08001053  81A0 A0A0 
08001057  A040 0000 
0800105B  00        
0800105C  0000 0000 1868          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
08001060  0000 0000 
08001064  0000 0000 
08001068  0000 0000 
0800106C  0000 0000 
08001070  0000      
08001072  0000 0000 1869          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
08001076  0000 0000 
0800107A  0000 0000 
0800107E  0000 0000 
08001082  0000 0000 
08001086  0000      
08001088  0000 0000 1870          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0800108C  0000 0000 
08001090  0000 0000 
08001094  0000 0000 
08001098  0000 0000 
0800109C  0000      
0800109E  0000 0000 1871          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
080010A2  0000 0000 
080010A6  0000 0000 
080010AA  0000 0000 
080010AE  0000 0000 
080010B2  0000      
080010B4  0000 0000 1872          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
080010B8  0000 0000 
080010BC  0000 0000 
080010C0  0000 0000 
080010C4  0000 0000 
080010C8  0000      
080010CA  0000 0000 1873          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
080010CE  0000 0000 
080010D2  0000 0000 
080010D6  0000 00   
                    1874          section   data
080010DA            1875                   align
                    1876   
                    1877   *********************************************************************************************************************************************************
                    1878   * Section for Initialised Data (in theory should be copied to Ram at startup) but is part of program code as we copy whole program to ram at startup
                    1879   ********************************************************************************************************************************************************
                    1880   
          0800 10DA 1881   DataStart       equ       *
080010DA            1882   __ungetbuf:     ds.l      1                    ungetbuffer for stdio functions
080010DE            1883   __allocp:       ds.l      1                    start of free memory block list
080010E2            1884   __heap:         ds.l      1                    begin of free memory
                    1885   
                    1886   
                    1887          section   bss
080010E6            1888                   align
                    1889   
          0800 10E6 1890   DataEnd         equ       *                    this label will equate to the address of the last byte of global variable in it
          0000 000C 1891   DataLength      equ       DataEnd-DataStart    length of data needed to copy to Ram on bootup
                    1892   
                    1893   *********************************************************************************************************
                    1894   * Section for uninitialised Data which is set to zero, i.e. we should set this space to zero at starup
                    1895   *********************************************************************************************************
          0800 10E6 1896   BssStart       equ       *
                    1897   
                    1898          section   heap
080010E6            1899                  align
                    1900   
          0800 10E6 1901   BssEnd         equ       *
          0000 0000 1902   BssLength      equ       BssEnd-BssStart       length of zeroed data needed to copy to Ram on bootup
                    1903   
                    1904   *********************************************************************************************************
                    1905   * Section for Heap
                    1906   *********************************************************************************************************
                    1907   
          0800 10E6 1908   heap           equ       *
080010E6            1909                  align
          0800 0000

Assembly errors: 0
